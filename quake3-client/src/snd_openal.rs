use libc;
#[header_src = "/home/miguelsaldivar/workspace/ioq3/code/qcommon/q_shared.h"]
pub mod q_shared_h {
    /*
===========================================================================
Copyright (C) 1999-2005 Id Software, Inc.

This file is part of Quake III Arena source code.

Quake III Arena source code is free software; you can redistribute it
and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the License,
or (at your option) any later version.

Quake III Arena source code is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Quake III Arena source code; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
===========================================================================
*/
//
    // q_shared.h -- included first by ALL program modules.
// A user mod should never modify this file
    // Heartbeat for dpmaster protocol. You shouldn't change this unless you know what you're doing
    // When com_gamename is LEGACY_MASTER_GAMENAME, use quake3 master protocol.
// You shouldn't change this unless you know what you're doing
    // number of supported master servers
    // standard demo extension
    //Ignore __attribute__ on non-gcc platforms
    /* *********************************************************************
  VM Considerations

  The VM can not use the standard system headers because we aren't really
  using the compiler they were meant for.  We use bg_lib.h which contains
  prototypes for the functions we define for our own use in bg_lib.c.

  When writing mods, please add needed headers HERE, do not start including
  stuff like <stdio.h> in the various .c files that make up each of the VMs
  since you will be including system headers files can will have issues.

  Remember, if you use a C library function that is not defined in bg_lib.c,
  you will have to add your own version for support in the VM.

 **********************************************************************/
    //=============================================================
    pub type byte = libc::c_uchar;
    pub type qboolean = libc::c_uint;
    pub const qtrue: qboolean = 1;
    pub const qfalse: qboolean = 0;
    pub type sfxHandle_t = libc::c_int;
    pub type fileHandle_t = libc::c_int;
    // parameters to the main Error routine
    pub type unnamed = libc::c_uint;
    // pop up the need-cd dialog
    pub const ERR_NEED_CD: unnamed = 4;
    // client disconnected from the server
    pub const ERR_DISCONNECT: unnamed = 3;
    // don't kill server
    pub const ERR_SERVERDISCONNECT: unnamed = 2;
    // print to console and disconnect from game
    pub const ERR_DROP: unnamed = 1;
    // exit the entire game with a popup window
    pub const ERR_FATAL: unnamed = 0;
    /*
==============================================================

MATHLIB

==============================================================
*/
    pub type vec_t = libc::c_float;
    pub type vec3_t = [vec_t; 3];
    #[derive
    ( Copy , Clone )]
    #[repr(C)]
    pub struct cvar_s {
        pub name: *mut libc::c_char,
        pub string: *mut libc::c_char,
        pub resetString: *mut libc::c_char,
        pub latchedString: *mut libc::c_char,
        pub flags: libc::c_int,
        pub modified: qboolean,
        pub modificationCount: libc::c_int,
        pub value: libc::c_float,
        pub integer: libc::c_int,
        pub validate: qboolean,
        pub integral: qboolean,
        pub min: libc::c_float,
        pub max: libc::c_float,
        pub description: *mut libc::c_char,
        pub next: *mut cvar_t,
        pub prev: *mut cvar_t,
        pub hashNext: *mut cvar_t,
        pub hashPrev: *mut cvar_t,
        pub hashIndex: libc::c_int,
    }
    /*
==========================================================

CVARS (console variables)

Many variables can be used for cheating purposes, so when
cheats is zero, force all unspecified variables to their
default values.
==========================================================
*/
    // set to cause it to be saved to vars.rc
    // used for system variables, not for player
					// specific configurations
    // sent to server on connect or change
    // sent in response to front end requests
    // these cvars will be duplicated on all clients
    // don't allow change from console at all,
    // but can be set from the command line
    // will only change when C code next does
    // a Cvar_Get(), so it can't be changed
					// without proper initialization.  modified
					// will be set, even though the value hasn't
					// changed yet
    // display only, cannot be set by user at all
    // created by a set command
    // can be set even when cheats are disabled, but is not archived
    // can not be changed if cheats are disabled
    // do not clear when a cvar_restart is issued
    // cvar was created by a server the client connected to.
    // cvar was created exclusively in one of the VMs.
    // prevent modifying this var from VMs or the server
    // These flags are only returned by the Cvar_Flags() function
    // Cvar was modified
    // Cvar doesn't exist.
    // nothing outside the Cvar_*() functions should modify these fields!
    pub type cvar_t = cvar_s;
    use super::{libc};
    extern "C" {
        #[no_mangle]
        pub static mut vec3_origin: vec3_t;
        #[no_mangle]
        pub fn Q_isnan(x: libc::c_float) -> libc::c_int;
        // portable case insensitive compare
        #[no_mangle]
        pub fn Q_stricmp(s1: *const libc::c_char, s2: *const libc::c_char)
         -> libc::c_int;
        // buffer size safe library replacements
        #[no_mangle]
        pub fn Q_strncpyz(dest: *mut libc::c_char, src: *const libc::c_char,
                          destsize: libc::c_int);
        #[no_mangle]
        pub fn Q_strcat(dest: *mut libc::c_char, size: libc::c_int,
                        src: *const libc::c_char);
        // this is only here so the functions in q_shared.c and bg_*.c can link
        #[no_mangle]
        pub fn Com_Error(level: libc::c_int, error: *const libc::c_char, ...)
         -> !;
        #[no_mangle]
        pub fn Com_Printf(msg: *const libc::c_char, ...);
    }
}
#[header_src = "/home/miguelsaldivar/workspace/ioq3/code/client/snd_local.h"]
pub mod snd_local_h {
    // Interface between Q3 sound "api" and the sound backend
    #[derive
    ( Copy , Clone )]
    #[repr(C)]
    pub struct soundInterface_t {
        pub Shutdown: Option<unsafe extern "C" fn() -> ()>,
        pub StartSound: Option<unsafe extern "C" fn(_: *mut vec_t,
                                                    _: libc::c_int,
                                                    _: libc::c_int,
                                                    _: sfxHandle_t) -> ()>,
        pub StartLocalSound: Option<unsafe extern "C" fn(_: sfxHandle_t,
                                                         _: libc::c_int)
                                        -> ()>,
        pub StartBackgroundTrack: Option<unsafe extern "C" fn(_:
                                                                  *const libc::c_char,
                                                              _:
                                                                  *const libc::c_char)
                                             -> ()>,
        pub StopBackgroundTrack: Option<unsafe extern "C" fn() -> ()>,
        pub RawSamples: Option<unsafe extern "C" fn(_: libc::c_int,
                                                    _: libc::c_int,
                                                    _: libc::c_int,
                                                    _: libc::c_int,
                                                    _: libc::c_int,
                                                    _: *const byte,
                                                    _: libc::c_float,
                                                    _: libc::c_int) -> ()>,
        pub StopAllSounds: Option<unsafe extern "C" fn() -> ()>,
        pub ClearLoopingSounds: Option<unsafe extern "C" fn(_: qboolean)
                                           -> ()>,
        pub AddLoopingSound: Option<unsafe extern "C" fn(_: libc::c_int,
                                                         _: *const vec_t,
                                                         _: *const vec_t,
                                                         _: sfxHandle_t)
                                        -> ()>,
        pub AddRealLoopingSound: Option<unsafe extern "C" fn(_: libc::c_int,
                                                             _: *const vec_t,
                                                             _: *const vec_t,
                                                             _: sfxHandle_t)
                                            -> ()>,
        pub StopLoopingSound: Option<unsafe extern "C" fn(_: libc::c_int)
                                         -> ()>,
        pub Respatialize: Option<unsafe extern "C" fn(_: libc::c_int,
                                                      _: *const vec_t,
                                                      _: *mut vec3_t,
                                                      _: libc::c_int) -> ()>,
        pub UpdateEntityPosition: Option<unsafe extern "C" fn(_: libc::c_int,
                                                              _: *const vec_t)
                                             -> ()>,
        pub Update: Option<unsafe extern "C" fn() -> ()>,
        pub DisableSounds: Option<unsafe extern "C" fn() -> ()>,
        pub BeginRegistration: Option<unsafe extern "C" fn() -> ()>,
        pub RegisterSound: Option<unsafe extern "C" fn(_: *const libc::c_char,
                                                       _: qboolean)
                                      -> sfxHandle_t>,
        pub ClearSoundBuffer: Option<unsafe extern "C" fn() -> ()>,
        pub SoundInfo: Option<unsafe extern "C" fn() -> ()>,
        pub SoundList: Option<unsafe extern "C" fn() -> ()>,
        pub StartCapture: Option<unsafe extern "C" fn() -> ()>,
        pub AvailableCaptureSamples: Option<unsafe extern "C" fn()
                                                -> libc::c_int>,
        pub Capture: Option<unsafe extern "C" fn(_: libc::c_int, _: *mut byte)
                                -> ()>,
        pub StopCapture: Option<unsafe extern "C" fn() -> ()>,
        pub MasterGain: Option<unsafe extern "C" fn(_: libc::c_float) -> ()>,
    }
    // OpenAL stuff
    pub type alSrcPriority_t = libc::c_uint;
    // Streams (music, cutscenes)
    pub const SRCPRI_STREAM: alSrcPriority_t = 4;
    // Local sounds
    pub const SRCPRI_LOCAL: alSrcPriority_t = 3;
    // One-shot sounds
    pub const SRCPRI_ONESHOT: alSrcPriority_t = 2;
    // Entity sound effects
    pub const SRCPRI_ENTITY: alSrcPriority_t = 1;
    // Ambient sound effects
    pub const SRCPRI_AMBIENT: alSrcPriority_t = 0;
    pub type srcHandle_t = libc::c_int;
    use super::q_shared_h::{vec_t, sfxHandle_t, byte, qboolean, vec3_t,
                            cvar_t};
    use super::{libc};
    extern "C" {
        #[no_mangle]
        pub static mut s_volume: *mut cvar_t;
        #[no_mangle]
        pub static mut s_musicVolume: *mut cvar_t;
        #[no_mangle]
        pub static mut s_muted: *mut cvar_t;
        #[no_mangle]
        pub static mut s_doppler: *mut cvar_t;
    }
}
#[header_src = "/usr/include/AL/al.h"]
pub mod al_h {
    pub type LPALLISTENERF
        =
        Option<unsafe extern "C" fn(_: ALenum, _: ALfloat) -> ()>;
    pub type ALfloat = libc::c_float;
    pub type ALenum = libc::c_int;
    pub type ALint = libc::c_int;
    pub type ALchar = libc::c_char;
    pub type LPALGETSTRING
        =
        Option<unsafe extern "C" fn(_: ALenum) -> *const ALchar>;
    pub type ALuint = libc::c_uint;
    pub type LPALDELETEBUFFERS
        =
        Option<unsafe extern "C" fn(_: ALsizei, _: *const ALuint) -> ()>;
    pub type ALsizei = libc::c_int;
    pub type LPALGETERROR = Option<unsafe extern "C" fn() -> ALenum>;
    pub type ALvoid = ();
    pub type LPALBUFFERDATA
        =
        Option<unsafe extern "C" fn(_: ALuint, _: ALenum,
                                    _: *const libc::c_void, _: ALsizei,
                                    _: ALsizei) -> ()>;
    pub type LPALGENBUFFERS
        =
        Option<unsafe extern "C" fn(_: ALsizei, _: *mut ALuint) -> ()>;
    pub type LPALSOURCEI
        =
        Option<unsafe extern "C" fn(_: ALuint, _: ALenum, _: ALint) -> ()>;
    pub type LPALSOURCESTOP = Option<unsafe extern "C" fn(_: ALuint) -> ()>;
    pub type LPALGETSOURCEF
        =
        Option<unsafe extern "C" fn(_: ALuint, _: ALenum, _: *mut ALfloat)
                   -> ()>;
    pub type LPALSPEEDOFSOUND
        =
        Option<unsafe extern "C" fn(_: ALfloat) -> ()>;
    pub type LPALDOPPLERFACTOR
        =
        Option<unsafe extern "C" fn(_: ALfloat) -> ()>;
    pub type LPALSOURCEF
        =
        Option<unsafe extern "C" fn(_: ALuint, _: ALenum, _: ALfloat) -> ()>;
    pub type LPALSOURCEPLAY = Option<unsafe extern "C" fn(_: ALuint) -> ()>;
    pub type LPALGETSOURCEI
        =
        Option<unsafe extern "C" fn(_: ALuint, _: ALenum, _: *mut ALint)
                   -> ()>;
    pub type LPALSOURCEQUEUEBUFFERS
        =
        Option<unsafe extern "C" fn(_: ALuint, _: ALsizei, _: *const ALuint)
                   -> ()>;
    pub type LPALSOURCEUNQUEUEBUFFERS
        =
        Option<unsafe extern "C" fn(_: ALuint, _: ALsizei, _: *mut ALuint)
                   -> ()>;
    pub type LPALSOURCEFV
        =
        Option<unsafe extern "C" fn(_: ALuint, _: ALenum, _: *const ALfloat)
                   -> ()>;
    pub type LPALLISTENERFV
        =
        Option<unsafe extern "C" fn(_: ALenum, _: *const ALfloat) -> ()>;
    pub type LPALSOURCE3F
        =
        Option<unsafe extern "C" fn(_: ALuint, _: ALenum, _: ALfloat,
                                    _: ALfloat, _: ALfloat) -> ()>;
    pub type LPALDELETESOURCES
        =
        Option<unsafe extern "C" fn(_: ALsizei, _: *const ALuint) -> ()>;
    pub type LPALDISTANCEMODEL
        =
        Option<unsafe extern "C" fn(_: ALenum) -> ()>;
    pub type LPALGENSOURCES
        =
        Option<unsafe extern "C" fn(_: ALsizei, _: *mut ALuint) -> ()>;
    use super::{libc};
}
#[header_src = "/usr/include/AL/alc.h"]
pub mod alc_h {
    pub type ALCdevice = ALCdevice_struct;
    pub type LPALCCAPTURESTOP
        =
        Option<unsafe extern "C" fn(_: *mut ALCdevice) -> ()>;
    pub type ALCvoid = ();
    pub type LPALCCAPTURESAMPLES
        =
        Option<unsafe extern "C" fn(_: *mut ALCdevice, _: *mut libc::c_void,
                                    _: ALCsizei) -> ()>;
    pub type ALCsizei = libc::c_int;
    pub type LPALCGETINTEGERV
        =
        Option<unsafe extern "C" fn(_: *mut ALCdevice, _: ALCenum,
                                    _: ALCsizei, _: *mut ALCint) -> ()>;
    pub type ALCint = libc::c_int;
    pub type ALCenum = libc::c_int;
    pub type LPALCCAPTURESTART
        =
        Option<unsafe extern "C" fn(_: *mut ALCdevice) -> ()>;
    pub type ALCchar = libc::c_char;
    pub type LPALCGETSTRING
        =
        Option<unsafe extern "C" fn(_: *mut ALCdevice, _: ALCenum)
                   -> *const ALCchar>;
    pub type ALCboolean = libc::c_char;
    pub type LPALCCAPTURECLOSEDEVICE
        =
        Option<unsafe extern "C" fn(_: *mut ALCdevice) -> ALCboolean>;
    pub type LPALCCLOSEDEVICE
        =
        Option<unsafe extern "C" fn(_: *mut ALCdevice) -> ALCboolean>;
    pub type ALCcontext = ALCcontext_struct;
    pub type LPALCDESTROYCONTEXT
        =
        Option<unsafe extern "C" fn(_: *mut ALCcontext) -> ()>;
    pub type ALCuint = libc::c_uint;
    pub type LPALCCAPTUREOPENDEVICE
        =
        Option<unsafe extern "C" fn(_: *const ALCchar, _: ALCuint, _: ALCenum,
                                    _: ALCsizei) -> *mut ALCdevice>;
    pub type LPALCISEXTENSIONPRESENT
        =
        Option<unsafe extern "C" fn(_: *mut ALCdevice, _: *const ALCchar)
                   -> ALCboolean>;
    pub type LPALCMAKECONTEXTCURRENT
        =
        Option<unsafe extern "C" fn(_: *mut ALCcontext) -> ALCboolean>;
    pub type LPALCCREATECONTEXT
        =
        Option<unsafe extern "C" fn(_: *mut ALCdevice, _: *const ALCint)
                   -> *mut ALCcontext>;
    pub type LPALCOPENDEVICE
        =
        Option<unsafe extern "C" fn(_: *const ALCchar) -> *mut ALCdevice>;
    use super::{libc};
    extern "C" {
        pub type ALCdevice_struct;
        pub type ALCcontext_struct;
    }
}
#[header_src = "/home/miguelsaldivar/workspace/ioq3/code/client/snd_openal.c"]
pub mod snd_openal_c {
    pub type alSfx_t = alSfx_s;
    //===========================================================================
    #[derive
    ( Copy , Clone )]
    #[repr(C)]
    pub struct alSfx_s {
        pub filename: [libc::c_char; 64],
        pub buffer: ALuint,
        pub info: snd_info_t,
        pub isDefault: qboolean,
        pub isDefaultChecked: qboolean,
        pub inMemory: qboolean,
        pub isLocked: qboolean,
        pub lastUsedTime: libc::c_int,
        pub loopCnt: libc::c_int,
        pub loopActiveCnt: libc::c_int,
        pub masterLoopSrc: libc::c_int,
    }
    pub type src_t = src_s;
    //===========================================================================
    #[derive
    ( Copy , Clone )]
    #[repr(C)]
    pub struct src_s {
        pub alSource: ALuint,
        pub sfx: sfxHandle_t,
        pub lastUsedTime: libc::c_int,
        pub priority: alSrcPriority_t,
        pub entity: libc::c_int,
        pub channel: libc::c_int,
        pub isActive: qboolean,
        pub isPlaying: qboolean,
        pub isLocked: qboolean,
        pub isLooping: qboolean,
        pub isTracking: qboolean,
        pub isStream: qboolean,
        pub curGain: libc::c_float,
        pub scaleGain: libc::c_float,
        pub lastTimePos: libc::c_float,
        pub lastSampleTime: libc::c_int,
        pub loopSpeakerPos: vec3_t,
        pub local: qboolean,
    }
    pub type sentity_t = sentity_s;
    #[derive
    ( Copy , Clone )]
    #[repr(C)]
    pub struct sentity_s {
        pub origin: vec3_t,
        pub srcAllocated: qboolean,
        pub srcIndex: libc::c_int,
        pub loopAddedThisFrame: qboolean,
        pub loopPriority: alSrcPriority_t,
        pub loopSfx: sfxHandle_t,
        pub startLoopingSound: qboolean,
    }
    use super::{libc};
    use super::al_h::{ALuint};
    use super::snd_codec_h::{snd_info_t};
    use super::q_shared_h::{qboolean, sfxHandle_t, vec3_t, cvar_t};
    use super::snd_local_h::{alSrcPriority_t};
}
#[header_src = "/home/miguelsaldivar/workspace/ioq3/code/client/snd_codec.h"]
pub mod snd_codec_h {
    pub type snd_info_t = snd_info_s;
    /*
===========================================================================
Copyright (C) 1999-2005 Id Software, Inc.
Copyright (C) 2005 Stuart Dalton (badcdev@gmail.com)

This file is part of Quake III Arena source code.

Quake III Arena source code is free software; you can redistribute it
and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the License,
or (at your option) any later version.

Quake III Arena source code is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Quake III Arena source code; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
===========================================================================
*/
    #[derive
    ( Copy , Clone )]
    #[repr(C)]
    pub struct snd_info_s {
        pub rate: libc::c_int,
        pub width: libc::c_int,
        pub channels: libc::c_int,
        pub samples: libc::c_int,
        pub size: libc::c_int,
        pub dataofs: libc::c_int,
    }
    pub type snd_stream_t = snd_stream_s;
    #[derive
    ( Copy , Clone )]
    #[repr(C)]
    pub struct snd_stream_s {
        pub codec: *mut snd_codec_t,
        pub file: fileHandle_t,
        pub info: snd_info_t,
        pub length: libc::c_int,
        pub pos: libc::c_int,
        pub ptr: *mut libc::c_void,
    }
    pub type snd_codec_t = snd_codec_s;
    // Codec data structure
    #[derive
    ( Copy , Clone )]
    #[repr(C)]
    pub struct snd_codec_s {
        pub ext: *mut libc::c_char,
        pub load: CODEC_LOAD,
        pub open: CODEC_OPEN,
        pub read: CODEC_READ,
        pub close: CODEC_CLOSE,
        pub next: *mut snd_codec_t,
    }
    pub type CODEC_CLOSE
        =
        Option<unsafe extern "C" fn(_: *mut snd_stream_t) -> ()>;
    pub type CODEC_READ
        =
        Option<unsafe extern "C" fn(_: *mut snd_stream_t, _: libc::c_int,
                                    _: *mut libc::c_void) -> libc::c_int>;
    pub type CODEC_OPEN
        =
        Option<unsafe extern "C" fn(_: *const libc::c_char)
                   -> *mut snd_stream_t>;
    // Codec functions
    pub type CODEC_LOAD
        =
        Option<unsafe extern "C" fn(_: *const libc::c_char,
                                    _: *mut snd_info_t) -> *mut libc::c_void>;
    use super::{libc};
    use super::q_shared_h::{fileHandle_t};
    extern "C" {
        #[no_mangle]
        pub fn S_CodecLoad(filename: *const libc::c_char,
                           info: *mut snd_info_t) -> *mut libc::c_void;
        #[no_mangle]
        pub fn S_CodecCloseStream(stream: *mut snd_stream_t);
        #[no_mangle]
        pub fn S_CodecReadStream(stream: *mut snd_stream_t,
                                 bytes: libc::c_int,
                                 buffer: *mut libc::c_void) -> libc::c_int;
        #[no_mangle]
        pub fn S_CodecOpenStream(filename: *const libc::c_char)
         -> *mut snd_stream_t;
    }
}
#[header_src = "/usr/include/x86_64-linux-gnu/bits/mathcalls.h"]
pub mod mathcalls_h {
    use super::{libc};
    extern "C" {
        #[no_mangle]
        pub fn sqrt(_: libc::c_double) -> libc::c_double;
        #[no_mangle]
        pub fn fmodf(_: libc::c_float, _: libc::c_float) -> libc::c_float;
    }
}
#[header_src = "/usr/include/string.h"]
pub mod string_h {
    use super::{libc};
    extern "C" {
        #[no_mangle]
        pub fn memcpy(_: *mut libc::c_void, _: *const libc::c_void,
                      _: libc::c_ulong) -> *mut libc::c_void;
        #[no_mangle]
        pub fn memset(_: *mut libc::c_void, _: libc::c_int, _: libc::c_ulong)
         -> *mut libc::c_void;
        #[no_mangle]
        pub fn strcpy(_: *mut libc::c_char, _: *const libc::c_char)
         -> *mut libc::c_char;
        #[no_mangle]
        pub fn strcmp(_: *const libc::c_char, _: *const libc::c_char)
         -> libc::c_int;
        #[no_mangle]
        pub fn strlen(_: *const libc::c_char) -> libc::c_ulong;
    }
}
#[header_src = "/home/miguelsaldivar/workspace/ioq3/code/qcommon/qcommon.h"]
pub mod qcommon_h {
    use super::q_shared_h::{cvar_t};
    use super::{libc};
    extern "C" {
        // Parses a single line of text into arguments and tries to execute it
// as if it was typed at the console
        /*
==============================================================

CVAR

==============================================================
*/
        /*

cvar_t variables are used to hold scalar or string variables that can be changed
or displayed at the console or prog code as well as accessed directly
in C code.

The user can access cvars from the console in three ways:
r_draworder			prints the current value
r_draworder 0		sets the current value to 0
set r_draworder 0	as above, but creates the cvar if not present

Cvars are restricted from having the same names as commands to keep this
interface from being ambiguous.

The are also occasionally used to communicated information between different
modules of the program.

*/
        #[no_mangle]
        pub fn Cvar_Get(var_name: *const libc::c_char,
                        value: *const libc::c_char, flags: libc::c_int)
         -> *mut cvar_t;
        #[no_mangle]
        pub fn Com_DPrintf(fmt: *const libc::c_char, ...);
        // will be journaled properly
        #[no_mangle]
        pub fn Com_Milliseconds() -> libc::c_int;
        #[no_mangle]
        pub fn Hunk_FreeTempMemory(buf: *mut libc::c_void);
        // Sys_Milliseconds should only be used for profiling purposes,
// any game related timing information should come from event timestamps
        #[no_mangle]
        pub fn Sys_Milliseconds() -> libc::c_int;
    }
}
#[header_src = "/home/miguelsaldivar/workspace/ioq3/code/client/qal.h"]
pub mod qal_h {
    use super::al_h::{LPALLISTENERF, LPALGETSTRING, LPALDELETEBUFFERS,
                      LPALGETERROR, LPALBUFFERDATA, LPALGENBUFFERS,
                      LPALSOURCEI, LPALSOURCESTOP, LPALGETSOURCEF,
                      LPALSPEEDOFSOUND, LPALDOPPLERFACTOR, LPALSOURCEF,
                      LPALSOURCEPLAY, LPALGETSOURCEI, LPALSOURCEQUEUEBUFFERS,
                      LPALSOURCEUNQUEUEBUFFERS, LPALSOURCEFV, LPALLISTENERFV,
                      LPALSOURCE3F, LPALDELETESOURCES, LPALDISTANCEMODEL,
                      LPALGENSOURCES};
    use super::alc_h::{LPALCCAPTURESTOP, LPALCCAPTURESAMPLES,
                       LPALCGETINTEGERV, LPALCCAPTURESTART, LPALCGETSTRING,
                       LPALCCAPTURECLOSEDEVICE, LPALCCLOSEDEVICE,
                       LPALCDESTROYCONTEXT, LPALCCAPTUREOPENDEVICE,
                       LPALCISEXTENSIONPRESENT, LPALCMAKECONTEXTCURRENT,
                       LPALCCREATECONTEXT, LPALCOPENDEVICE};
    use super::q_shared_h::{qboolean};
    use super::{libc};
    extern "C" {
        #[no_mangle]
        pub static mut qalListenerf: LPALLISTENERF;
        #[no_mangle]
        pub static mut qalcCaptureStop: LPALCCAPTURESTOP;
        #[no_mangle]
        pub static mut qalcCaptureSamples: LPALCCAPTURESAMPLES;
        #[no_mangle]
        pub static mut qalcGetIntegerv: LPALCGETINTEGERV;
        #[no_mangle]
        pub static mut qalcCaptureStart: LPALCCAPTURESTART;
        #[no_mangle]
        pub static mut qalcGetString: LPALCGETSTRING;
        #[no_mangle]
        pub static mut qalGetString: LPALGETSTRING;
        #[no_mangle]
        pub static mut qalDeleteBuffers: LPALDELETEBUFFERS;
        #[no_mangle]
        pub static mut qalGetError: LPALGETERROR;
        #[no_mangle]
        pub static mut qalBufferData: LPALBUFFERDATA;
        #[no_mangle]
        pub static mut qalGenBuffers: LPALGENBUFFERS;
        #[no_mangle]
        pub static mut qalSourcei: LPALSOURCEI;
        #[no_mangle]
        pub static mut qalSourceStop: LPALSOURCESTOP;
        #[no_mangle]
        pub static mut qalGetSourcef: LPALGETSOURCEF;
        #[no_mangle]
        pub static mut qalSpeedOfSound: LPALSPEEDOFSOUND;
        #[no_mangle]
        pub static mut qalDopplerFactor: LPALDOPPLERFACTOR;
        #[no_mangle]
        pub static mut qalSourcef: LPALSOURCEF;
        #[no_mangle]
        pub static mut qalSourcePlay: LPALSOURCEPLAY;
        #[no_mangle]
        pub static mut qalGetSourcei: LPALGETSOURCEI;
        #[no_mangle]
        pub static mut qalSourceQueueBuffers: LPALSOURCEQUEUEBUFFERS;
        #[no_mangle]
        pub static mut qalSourceUnqueueBuffers: LPALSOURCEUNQUEUEBUFFERS;
        #[no_mangle]
        pub static mut qalSourcefv: LPALSOURCEFV;
        #[no_mangle]
        pub static mut qalListenerfv: LPALLISTENERFV;
        #[no_mangle]
        pub static mut qalSource3f: LPALSOURCE3F;
        #[no_mangle]
        pub fn QAL_Shutdown();
        #[no_mangle]
        pub static mut qalcCaptureCloseDevice: LPALCCAPTURECLOSEDEVICE;
        #[no_mangle]
        pub static mut qalcCloseDevice: LPALCCLOSEDEVICE;
        #[no_mangle]
        pub static mut qalcDestroyContext: LPALCDESTROYCONTEXT;
        #[no_mangle]
        pub static mut qalDeleteSources: LPALDELETESOURCES;
        #[no_mangle]
        pub static mut qalcCaptureOpenDevice: LPALCCAPTUREOPENDEVICE;
        #[no_mangle]
        pub static mut qalcIsExtensionPresent: LPALCISEXTENSIONPRESENT;
        #[no_mangle]
        pub static mut qalDistanceModel: LPALDISTANCEMODEL;
        #[no_mangle]
        pub static mut qalGenSources: LPALGENSOURCES;
        #[no_mangle]
        pub static mut qalcMakeContextCurrent: LPALCMAKECONTEXTCURRENT;
        #[no_mangle]
        pub static mut qalcCreateContext: LPALCCREATECONTEXT;
        #[no_mangle]
        pub static mut qalcOpenDevice: LPALCOPENDEVICE;
        #[no_mangle]
        pub fn QAL_Init(libname: *const libc::c_char) -> qboolean;
    }
}
#[header_src = "/home/miguelsaldivar/workspace/ioq3/code/client/client.h"]
pub mod client_h {
    use super::q_shared_h::{cvar_t};
    extern "C" {
        #[no_mangle]
        pub static mut cl_useMumble: *mut cvar_t;
    }
}
use self::q_shared_h::{byte, qboolean, qtrue, qfalse, sfxHandle_t,
                       fileHandle_t, unnamed, ERR_NEED_CD, ERR_DISCONNECT,
                       ERR_SERVERDISCONNECT, ERR_DROP, ERR_FATAL, vec_t,
                       vec3_t, cvar_s, cvar_t, vec3_origin, Q_isnan,
                       Q_stricmp, Q_strncpyz, Q_strcat, Com_Error,
                       Com_Printf};
use self::snd_local_h::{soundInterface_t, alSrcPriority_t, SRCPRI_STREAM,
                        SRCPRI_LOCAL, SRCPRI_ONESHOT, SRCPRI_ENTITY,
                        SRCPRI_AMBIENT, srcHandle_t, s_volume, s_musicVolume,
                        s_muted, s_doppler};
use self::al_h::{LPALLISTENERF, ALfloat, ALenum, ALint, ALchar, LPALGETSTRING,
                 ALuint, LPALDELETEBUFFERS, ALsizei, LPALGETERROR, ALvoid,
                 LPALBUFFERDATA, LPALGENBUFFERS, LPALSOURCEI, LPALSOURCESTOP,
                 LPALGETSOURCEF, LPALSPEEDOFSOUND, LPALDOPPLERFACTOR,
                 LPALSOURCEF, LPALSOURCEPLAY, LPALGETSOURCEI,
                 LPALSOURCEQUEUEBUFFERS, LPALSOURCEUNQUEUEBUFFERS,
                 LPALSOURCEFV, LPALLISTENERFV, LPALSOURCE3F,
                 LPALDELETESOURCES, LPALDISTANCEMODEL, LPALGENSOURCES};
use self::alc_h::{ALCdevice, LPALCCAPTURESTOP, ALCvoid, LPALCCAPTURESAMPLES,
                  ALCsizei, LPALCGETINTEGERV, ALCint, ALCenum,
                  LPALCCAPTURESTART, ALCchar, LPALCGETSTRING, ALCboolean,
                  LPALCCAPTURECLOSEDEVICE, LPALCCLOSEDEVICE, ALCcontext,
                  LPALCDESTROYCONTEXT, ALCuint, LPALCCAPTUREOPENDEVICE,
                  LPALCISEXTENSIONPRESENT, LPALCMAKECONTEXTCURRENT,
                  LPALCCREATECONTEXT, LPALCOPENDEVICE, ALCdevice_struct,
                  ALCcontext_struct};
use self::snd_openal_c::{alSfx_t, alSfx_s, src_t, src_s, sentity_t,
                         sentity_s};
use self::snd_codec_h::{snd_info_t, snd_info_s, snd_stream_t, snd_stream_s,
                        snd_codec_t, snd_codec_s, CODEC_CLOSE, CODEC_READ,
                        CODEC_OPEN, CODEC_LOAD, S_CodecLoad,
                        S_CodecCloseStream, S_CodecReadStream,
                        S_CodecOpenStream};
use self::mathcalls_h::{sqrt, fmodf};
use self::string_h::{memcpy, memset, strcpy, strcmp, strlen};
use self::qcommon_h::{Cvar_Get, Com_DPrintf, Com_Milliseconds,
                      Hunk_FreeTempMemory, Sys_Milliseconds};
use self::qal_h::{qalListenerf, qalcCaptureStop, qalcCaptureSamples,
                  qalcGetIntegerv, qalcCaptureStart, qalcGetString,
                  qalGetString, qalDeleteBuffers, qalGetError, qalBufferData,
                  qalGenBuffers, qalSourcei, qalSourceStop, qalGetSourcef,
                  qalSpeedOfSound, qalDopplerFactor, qalSourcef,
                  qalSourcePlay, qalGetSourcei, qalSourceQueueBuffers,
                  qalSourceUnqueueBuffers, qalSourcefv, qalListenerfv,
                  qalSource3f, QAL_Shutdown, qalcCaptureCloseDevice,
                  qalcCloseDevice, qalcDestroyContext, qalDeleteSources,
                  qalcCaptureOpenDevice, qalcIsExtensionPresent,
                  qalDistanceModel, qalGenSources, qalcMakeContextCurrent,
                  qalcCreateContext, qalcOpenDevice, QAL_Init};
use self::client_h::{cl_useMumble};
unsafe extern "C" fn VectorLength(mut v: *const vec_t) -> vec_t {
    return sqrt((*v.offset(0isize) * *v.offset(0isize) +
                     *v.offset(1isize) * *v.offset(1isize) +
                     *v.offset(2isize) * *v.offset(2isize)) as libc::c_double)
               as vec_t;
}
unsafe extern "C" fn Distance(mut p1: *const vec_t, mut p2: *const vec_t)
 -> vec_t {
    let mut v: vec3_t = [0.; 3];
    v[0usize] = *p2.offset(0isize) - *p1.offset(0isize);
    v[1usize] = *p2.offset(1isize) - *p1.offset(1isize);
    v[2usize] = *p2.offset(2isize) - *p1.offset(2isize);
    return VectorLength(v.as_mut_ptr() as *const vec_t);
}
unsafe extern "C" fn DistanceSquared(mut p1: *const vec_t,
                                     mut p2: *const vec_t) -> vec_t {
    let mut v: vec3_t = [0.; 3];
    v[0usize] = *p2.offset(0isize) - *p1.offset(0isize);
    v[1usize] = *p2.offset(1isize) - *p1.offset(1isize);
    v[2usize] = *p2.offset(2isize) - *p1.offset(2isize);
    return v[0usize] * v[0usize] + v[1usize] * v[1usize] +
               v[2usize] * v[2usize];
}
#[no_mangle]
pub unsafe extern "C" fn S_AL_Init(mut si: *mut soundInterface_t)
 -> qboolean {
    let mut device: *const libc::c_char = 0 as *const libc::c_char;
    let mut inputdevice: *const libc::c_char = 0 as *const libc::c_char;
    let mut i: libc::c_int = 0;
    if si.is_null() { return qfalse }
    i = 0i32;
    while i < 64i32 * 2i32 + 1i32 {
        streamSourceHandles[i as usize] = -1i32;
        streamPlaying[i as usize] = qfalse;
        streamSources[i as usize] = 0i32 as ALuint;
        streamNumBuffers[i as usize] = 0i32;
        streamBufIndex[i as usize] = 0i32;
        i += 1
    }
    s_alPrecache =
        Cvar_Get(b"s_alPrecache\x00" as *const u8 as *const libc::c_char,
                 b"1\x00" as *const u8 as *const libc::c_char, 0x1i32);
    s_alGain =
        Cvar_Get(b"s_alGain\x00" as *const u8 as *const libc::c_char,
                 b"1.0\x00" as *const u8 as *const libc::c_char, 0x1i32);
    s_alSources =
        Cvar_Get(b"s_alSources\x00" as *const u8 as *const libc::c_char,
                 b"96\x00" as *const u8 as *const libc::c_char, 0x1i32);
    s_alDopplerFactor =
        Cvar_Get(b"s_alDopplerFactor\x00" as *const u8 as *const libc::c_char,
                 b"1.0\x00" as *const u8 as *const libc::c_char, 0x1i32);
    s_alDopplerSpeed =
        Cvar_Get(b"s_alDopplerSpeed\x00" as *const u8 as *const libc::c_char,
                 b"9000\x00" as *const u8 as *const libc::c_char, 0x1i32);
    s_alMinDistance =
        Cvar_Get(b"s_alMinDistance\x00" as *const u8 as *const libc::c_char,
                 b"120\x00" as *const u8 as *const libc::c_char, 0x200i32);
    s_alMaxDistance =
        Cvar_Get(b"s_alMaxDistance\x00" as *const u8 as *const libc::c_char,
                 b"1024\x00" as *const u8 as *const libc::c_char, 0x200i32);
    s_alRolloff =
        Cvar_Get(b"s_alRolloff\x00" as *const u8 as *const libc::c_char,
                 b"2\x00" as *const u8 as *const libc::c_char, 0x200i32);
    s_alGraceDistance =
        Cvar_Get(b"s_alGraceDistance\x00" as *const u8 as *const libc::c_char,
                 b"512\x00" as *const u8 as *const libc::c_char, 0x200i32);
    s_alDriver =
        Cvar_Get(b"s_alDriver\x00" as *const u8 as *const libc::c_char,
                 b"libopenal.so.1\x00" as *const u8 as *const libc::c_char,
                 0x1i32 | 0x20i32 | 0x2000i32);
    s_alInputDevice =
        Cvar_Get(b"s_alInputDevice\x00" as *const u8 as *const libc::c_char,
                 b"\x00" as *const u8 as *const libc::c_char,
                 0x1i32 | 0x20i32);
    s_alDevice =
        Cvar_Get(b"s_alDevice\x00" as *const u8 as *const libc::c_char,
                 b"\x00" as *const u8 as *const libc::c_char,
                 0x1i32 | 0x20i32);
    if 0 == QAL_Init((*s_alDriver).string) as u64 {
        Com_Printf(b"Failed to load library: \"%s\".\n\x00" as *const u8 as
                       *const libc::c_char, (*s_alDriver).string);
        if 0 ==
               Q_stricmp((*s_alDriver).string,
                         b"libopenal.so.1\x00" as *const u8 as
                             *const libc::c_char) ||
               0 ==
                   QAL_Init(b"libopenal.so.1\x00" as *const u8 as
                                *const libc::c_char) as u64 {
            return qfalse
        }
    }
    device = (*s_alDevice).string;
    if !device.is_null() && 0 == *device { device = 0 as *const libc::c_char }
    inputdevice = (*s_alInputDevice).string;
    if !inputdevice.is_null() && 0 == *inputdevice {
        inputdevice = 0 as *const libc::c_char
    }
    enumeration_all_ext =
        qalcIsExtensionPresent.expect("non-null function pointer")(0 as
                                                                       *mut ALCdevice,
                                                                   b"ALC_ENUMERATE_ALL_EXT\x00"
                                                                       as
                                                                       *const u8
                                                                       as
                                                                       *const libc::c_char)
            as qboolean;
    enumeration_ext =
        qalcIsExtensionPresent.expect("non-null function pointer")(0 as
                                                                       *mut ALCdevice,
                                                                   b"ALC_ENUMERATION_EXT\x00"
                                                                       as
                                                                       *const u8
                                                                       as
                                                                       *const libc::c_char)
            as qboolean;
    if 0 != enumeration_ext as libc::c_uint ||
           0 != enumeration_all_ext as libc::c_uint {
        let mut devicenames: [libc::c_char; 16384] =
            *::std::mem::transmute::<&[u8; 16384],
                                     &mut [libc::c_char; 16384]>(b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00");
        let mut devicelist: *const libc::c_char = 0 as *const libc::c_char;
        let mut curlen: libc::c_int = 0;
        if 0 != enumeration_all_ext as u64 {
            devicelist =
                qalcGetString.expect("non-null function pointer")(0 as
                                                                      *mut ALCdevice,
                                                                  0x1013i32)
        } else {
            devicelist =
                qalcGetString.expect("non-null function pointer")(0 as
                                                                      *mut ALCdevice,
                                                                  0x1005i32);
            enumeration_ext = qtrue
        }
        if !devicelist.is_null() {
            loop  {
                curlen = strlen(devicelist) as libc::c_int;
                if !(0 != curlen) { break ; }
                Q_strcat(devicenames.as_mut_ptr(),
                         ::std::mem::size_of::<[libc::c_char; 16384]>() as
                             libc::c_ulong as libc::c_int, devicelist);
                Q_strcat(devicenames.as_mut_ptr(),
                         ::std::mem::size_of::<[libc::c_char; 16384]>() as
                             libc::c_ulong as libc::c_int,
                         b"\n\x00" as *const u8 as *const libc::c_char);
                devicelist = devicelist.offset((curlen + 1i32) as isize)
            }
        }
        s_alAvailableDevices =
            Cvar_Get(b"s_alAvailableDevices\x00" as *const u8 as
                         *const libc::c_char, devicenames.as_mut_ptr(),
                     0x40i32 | 0x400i32)
    }
    alDevice = qalcOpenDevice.expect("non-null function pointer")(device);
    if alDevice.is_null() && !device.is_null() {
        Com_Printf(b"Failed to open OpenAL device \'%s\', trying default.\n\x00"
                       as *const u8 as *const libc::c_char, device);
        alDevice =
            qalcOpenDevice.expect("non-null function pointer")(0 as
                                                                   *const ALCchar)
    }
    if alDevice.is_null() {
        QAL_Shutdown();
        Com_Printf(b"Failed to open OpenAL device.\n\x00" as *const u8 as
                       *const libc::c_char);
        return qfalse
    }
    alContext =
        qalcCreateContext.expect("non-null function pointer")(alDevice,
                                                              0 as
                                                                  *const ALCint);
    if alContext.is_null() {
        QAL_Shutdown();
        qalcCloseDevice.expect("non-null function pointer")(alDevice);
        Com_Printf(b"Failed to create OpenAL context.\n\x00" as *const u8 as
                       *const libc::c_char);
        return qfalse
    }
    qalcMakeContextCurrent.expect("non-null function pointer")(alContext);
    S_AL_BufferInit();
    S_AL_SrcInit();
    qalDistanceModel.expect("non-null function pointer")(0xd002i32);
    qalDopplerFactor.expect("non-null function pointer")((*s_alDopplerFactor).value);
    qalSpeedOfSound.expect("non-null function pointer")((*s_alDopplerSpeed).value);
    s_alCapture =
        Cvar_Get(b"s_alCapture\x00" as *const u8 as *const libc::c_char,
                 b"1\x00" as *const u8 as *const libc::c_char,
                 0x1i32 | 0x20i32);
    if 0 == (*s_alCapture).integer {
        Com_Printf(b"OpenAL capture support disabled by user (\'+set s_alCapture 1\' to enable)\n\x00"
                       as *const u8 as *const libc::c_char);
    } else if 0 != (*cl_useMumble).integer {
        Com_Printf(b"OpenAL capture support disabled for Mumble support\n\x00"
                       as *const u8 as *const libc::c_char);
    } else if 0 ==
                  qalcIsExtensionPresent.expect("non-null function pointer")(0
                                                                                 as
                                                                                 *mut ALCdevice,
                                                                             b"ALC_EXT_capture\x00"
                                                                                 as
                                                                                 *const u8
                                                                                 as
                                                                                 *const libc::c_char)
     {
        Com_Printf(b"No ALC_EXT_capture support, can\'t record audio.\n\x00"
                       as *const u8 as *const libc::c_char);
    } else {
        let mut inputdevicenames: [libc::c_char; 16384] =
            *::std::mem::transmute::<&[u8; 16384],
                                     &mut [libc::c_char; 16384]>(b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00");
        let mut inputdevicelist: *const libc::c_char =
            0 as *const libc::c_char;
        let mut defaultinputdevice: *const libc::c_char =
            0 as *const libc::c_char;
        let mut curlen_0: libc::c_int = 0;
        capture_ext = qtrue;
        inputdevicelist =
            qalcGetString.expect("non-null function pointer")(0 as
                                                                  *mut ALCdevice,
                                                              0x310i32);
        defaultinputdevice =
            qalcGetString.expect("non-null function pointer")(0 as
                                                                  *mut ALCdevice,
                                                              0x311i32);
        if !inputdevicelist.is_null() {
            loop  {
                curlen_0 = strlen(inputdevicelist) as libc::c_int;
                if !(0 != curlen_0) { break ; }
                Q_strcat(inputdevicenames.as_mut_ptr(),
                         ::std::mem::size_of::<[libc::c_char; 16384]>() as
                             libc::c_ulong as libc::c_int, inputdevicelist);
                Q_strcat(inputdevicenames.as_mut_ptr(),
                         ::std::mem::size_of::<[libc::c_char; 16384]>() as
                             libc::c_ulong as libc::c_int,
                         b"\n\x00" as *const u8 as *const libc::c_char);
                inputdevicelist =
                    inputdevicelist.offset((curlen_0 + 1i32) as isize)
            }
        }
        s_alAvailableInputDevices =
            Cvar_Get(b"s_alAvailableInputDevices\x00" as *const u8 as
                         *const libc::c_char, inputdevicenames.as_mut_ptr(),
                     0x40i32 | 0x400i32);
        Com_Printf(b"OpenAL default capture device is \'%s\'\n\x00" as
                       *const u8 as *const libc::c_char,
                   if !defaultinputdevice.is_null() {
                       defaultinputdevice
                   } else {
                       b"none\x00" as *const u8 as *const libc::c_char
                   });
        alCaptureDevice =
            qalcCaptureOpenDevice.expect("non-null function pointer")(inputdevice,
                                                                      48000i32
                                                                          as
                                                                          ALCuint,
                                                                      0x1101i32,
                                                                      20i32 *
                                                                          48i32
                                                                          *
                                                                          3i32
                                                                          *
                                                                          4i32);
        if alCaptureDevice.is_null() && !inputdevice.is_null() {
            Com_Printf(b"Failed to open OpenAL Input device \'%s\', trying default.\n\x00"
                           as *const u8 as *const libc::c_char, inputdevice);
            alCaptureDevice =
                qalcCaptureOpenDevice.expect("non-null function pointer")(0 as
                                                                              *const ALCchar,
                                                                          48000i32
                                                                              as
                                                                              ALCuint,
                                                                          0x1101i32,
                                                                          20i32
                                                                              *
                                                                              48i32
                                                                              *
                                                                              3i32
                                                                              *
                                                                              4i32)
        }
        Com_Printf(b"OpenAL capture device %s.\n\x00" as *const u8 as
                       *const libc::c_char,
                   if alCaptureDevice.is_null() {
                       b"failed to open\x00" as *const u8 as
                           *const libc::c_char
                   } else {
                       b"opened\x00" as *const u8 as *const libc::c_char
                   });
    }
    (*si).Shutdown = Some(S_AL_Shutdown);
    (*si).StartSound = Some(S_AL_StartSound);
    (*si).StartLocalSound = Some(S_AL_StartLocalSound);
    (*si).StartBackgroundTrack = Some(S_AL_StartBackgroundTrack);
    (*si).StopBackgroundTrack = Some(S_AL_StopBackgroundTrack);
    (*si).RawSamples = Some(S_AL_RawSamples);
    (*si).StopAllSounds = Some(S_AL_StopAllSounds);
    (*si).ClearLoopingSounds = Some(S_AL_ClearLoopingSounds);
    (*si).AddLoopingSound = Some(S_AL_AddLoopingSound);
    (*si).AddRealLoopingSound = Some(S_AL_AddRealLoopingSound);
    (*si).StopLoopingSound = Some(S_AL_StopLoopingSound);
    (*si).Respatialize = Some(S_AL_Respatialize);
    (*si).UpdateEntityPosition = Some(S_AL_UpdateEntityPosition);
    (*si).Update = Some(S_AL_Update);
    (*si).DisableSounds = Some(S_AL_DisableSounds);
    (*si).BeginRegistration = Some(S_AL_BeginRegistration);
    (*si).RegisterSound = Some(S_AL_RegisterSound);
    (*si).ClearSoundBuffer = Some(S_AL_ClearSoundBuffer);
    (*si).SoundInfo = Some(S_AL_SoundInfo);
    (*si).SoundList = Some(S_AL_SoundList);
    (*si).StartCapture = Some(S_AL_StartCapture);
    (*si).AvailableCaptureSamples = Some(S_AL_AvailableCaptureSamples);
    (*si).Capture = Some(S_AL_Capture);
    (*si).StopCapture = Some(S_AL_StopCapture);
    (*si).MasterGain = Some(S_AL_MasterGain);
    return qtrue;
}
#[no_mangle]
pub unsafe extern "C" fn S_AL_MasterGain(mut gain: libc::c_float) {
    qalListenerf.expect("non-null function pointer")(0x100ai32, gain);
}
#[no_mangle]
pub unsafe extern "C" fn S_AL_StopCapture() {
    if !alCaptureDevice.is_null() {
        qalcCaptureStop.expect("non-null function pointer")(alCaptureDevice);
    };
}
static mut alCaptureDevice: *mut ALCdevice =
    0 as *const ALCdevice as *mut ALCdevice;
unsafe extern "C" fn S_AL_Capture(mut samples: libc::c_int,
                                  mut data: *mut byte) {
    if !alCaptureDevice.is_null() {
        qalcCaptureSamples.expect("non-null function pointer")(alCaptureDevice,
                                                               data as
                                                                   *mut libc::c_void,
                                                               samples);
    };
}
unsafe extern "C" fn S_AL_AvailableCaptureSamples() -> libc::c_int {
    let mut retval: libc::c_int = 0i32;
    if !alCaptureDevice.is_null() {
        let mut samples: ALint = 0i32;
        qalcGetIntegerv.expect("non-null function pointer")(alCaptureDevice,
                                                            0x312i32,
                                                            ::std::mem::size_of::<ALint>()
                                                                as
                                                                libc::c_ulong
                                                                as ALCsizei,
                                                            &mut samples);
        retval = samples
    }
    return retval;
}
unsafe extern "C" fn S_AL_StartCapture() {
    if !alCaptureDevice.is_null() {
        qalcCaptureStart.expect("non-null function pointer")(alCaptureDevice);
    };
}
/*
=================
S_AL_SoundList
=================
*/
unsafe extern "C" fn S_AL_SoundList() { }
/*
=================
S_AL_SoundInfo
=================
*/
unsafe extern "C" fn S_AL_SoundInfo() {
    Com_Printf(b"OpenAL info:\n\x00" as *const u8 as *const libc::c_char);
    Com_Printf(b"  Vendor:         %s\n\x00" as *const u8 as
                   *const libc::c_char,
               qalGetString.expect("non-null function pointer")(0xb001i32));
    Com_Printf(b"  Version:        %s\n\x00" as *const u8 as
                   *const libc::c_char,
               qalGetString.expect("non-null function pointer")(0xb002i32));
    Com_Printf(b"  Renderer:       %s\n\x00" as *const u8 as
                   *const libc::c_char,
               qalGetString.expect("non-null function pointer")(0xb003i32));
    Com_Printf(b"  AL Extensions:  %s\n\x00" as *const u8 as
                   *const libc::c_char,
               qalGetString.expect("non-null function pointer")(0xb004i32));
    Com_Printf(b"  ALC Extensions: %s\n\x00" as *const u8 as
                   *const libc::c_char,
               qalcGetString.expect("non-null function pointer")(alDevice,
                                                                 0x1006i32));
    if 0 != enumeration_all_ext as u64 {
        Com_Printf(b"  Device:         %s\n\x00" as *const u8 as
                       *const libc::c_char,
                   qalcGetString.expect("non-null function pointer")(alDevice,
                                                                     0x1013i32));
    } else if 0 != enumeration_ext as u64 {
        Com_Printf(b"  Device:         %s\n\x00" as *const u8 as
                       *const libc::c_char,
                   qalcGetString.expect("non-null function pointer")(alDevice,
                                                                     0x1005i32));
    }
    if 0 != enumeration_all_ext as libc::c_uint ||
           0 != enumeration_ext as libc::c_uint {
        Com_Printf(b"  Available Devices:\n%s\x00" as *const u8 as
                       *const libc::c_char, (*s_alAvailableDevices).string);
    }
    if 0 != capture_ext as u64 {
        Com_Printf(b"  Input Device:   %s\n\x00" as *const u8 as
                       *const libc::c_char,
                   qalcGetString.expect("non-null function pointer")(alCaptureDevice,
                                                                     0x310i32));
        Com_Printf(b"  Available Input Devices:\n%s\x00" as *const u8 as
                       *const libc::c_char,
                   (*s_alAvailableInputDevices).string);
    };
}
#[no_mangle]
pub static mut s_alAvailableInputDevices: *mut cvar_t =
    0 as *const cvar_t as *mut cvar_t;
static mut capture_ext: qboolean = qfalse;
#[no_mangle]
pub static mut s_alAvailableDevices: *mut cvar_t =
    0 as *const cvar_t as *mut cvar_t;
static mut enumeration_ext: qboolean = qfalse;
static mut enumeration_all_ext: qboolean = qfalse;
//===========================================================================
// Local state variables
static mut alDevice: *mut ALCdevice = 0 as *const ALCdevice as *mut ALCdevice;
/*
=================
S_AL_ClearSoundBuffer
=================
*/
unsafe extern "C" fn S_AL_ClearSoundBuffer() { }
/*
=================
S_AL_RegisterSound
=================
*/
unsafe extern "C" fn S_AL_RegisterSound(mut sample: *const libc::c_char,
                                        mut compressed: qboolean)
 -> sfxHandle_t {
    let mut sfx: sfxHandle_t = S_AL_BufferFind(sample);
    if 0 == knownSfx[sfx as usize].inMemory as u64 &&
           0 == knownSfx[sfx as usize].isDefault as u64 {
        S_AL_BufferLoad(sfx, (*s_alPrecache).integer as qboolean);
    }
    knownSfx[sfx as usize].lastUsedTime = Com_Milliseconds();
    if 0 != knownSfx[sfx as usize].isDefault as u64 { return 0i32 }
    return sfx;
}
/*
=================
S_AL_BufferFind

Find a sound effect if loaded, set up a handle otherwise
=================
*/
unsafe extern "C" fn S_AL_BufferFind(mut filename: *const libc::c_char)
 -> sfxHandle_t {
    // Look it up in the table
    let mut sfx: sfxHandle_t = -1i32;
    let mut i: libc::c_int = 0;
    if filename.is_null() {
        Com_Error(ERR_FATAL as libc::c_int,
                  b"Sound name is NULL\x00" as *const u8 as
                      *const libc::c_char);
    }
    if 0 == *filename.offset(0isize) {
        Com_Printf(b"^3WARNING: Sound name is empty\n\x00" as *const u8 as
                       *const libc::c_char);
        return 0i32
    }
    if strlen(filename) >= 64i32 as libc::c_ulong {
        Com_Printf(b"^3WARNING: Sound name is too long: %s\n\x00" as *const u8
                       as *const libc::c_char, filename);
        return 0i32
    }
    if *filename.offset(0isize) as libc::c_int == '*' as i32 {
        Com_Printf(b"^3WARNING: Tried to load player sound directly: %s\n\x00"
                       as *const u8 as *const libc::c_char, filename);
        return 0i32
    }
    i = 0i32;
    while i < numSfx {
        if 0 ==
               Q_stricmp(knownSfx[i as usize].filename.as_mut_ptr(), filename)
           {
            sfx = i;
            break ;
        } else { i += 1 }
    }
    if sfx == -1i32 {
        let mut ptr: *mut alSfx_t = 0 as *mut alSfx_t;
        sfx = S_AL_BufferFindFree();
        ptr = &mut knownSfx[sfx as usize] as *mut alSfx_t;
        memset(ptr as *mut libc::c_void, 0i32,
               ::std::mem::size_of::<alSfx_t>() as libc::c_ulong);
        (*ptr).masterLoopSrc = -1i32;
        strcpy((*ptr).filename.as_mut_ptr(), filename);
    }
    return sfx;
}
// Sound effect storage, data structures
static mut knownSfx: [alSfx_t; 4096] =
    [alSfx_s{filename: [0; 64],
             buffer: 0,
             info:
                 snd_info_s{rate: 0,
                            width: 0,
                            channels: 0,
                            samples: 0,
                            size: 0,
                            dataofs: 0,},
             isDefault: qfalse,
             isDefaultChecked: qfalse,
             inMemory: qfalse,
             isLocked: qfalse,
             lastUsedTime: 0,
             loopCnt: 0,
             loopActiveCnt: 0,
             masterLoopSrc: 0,}; 4096];
/*
=================
S_AL_BufferFindFree

Find a free handle
=================
*/
unsafe extern "C" fn S_AL_BufferFindFree() -> sfxHandle_t {
    let mut i: libc::c_int = 0;
    i = 0i32;
    while i < 4096i32 {
        if knownSfx[i as usize].filename[0usize] as libc::c_int ==
               '\u{0}' as i32 {
            if i >= numSfx { numSfx = i + 1i32 }
            return i
        }
        i += 1
    }
    Com_Error(ERR_FATAL as libc::c_int,
              b"S_AL_BufferFindFree: No free sound handles\x00" as *const u8
                  as *const libc::c_char);
}
static mut numSfx: sfxHandle_t = 0i32;
/*
===========================================================================
Copyright (C) 1999-2005 Id Software, Inc.
Copyright (C) 2005 Stuart Dalton (badcdev@gmail.com)

This file is part of Quake III Arena source code.

Quake III Arena source code is free software; you can redistribute it
and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the License,
or (at your option) any later version.

Quake III Arena source code is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Quake III Arena source code; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
===========================================================================
*/
// Console variables specific to OpenAL
#[no_mangle]
pub static mut s_alPrecache: *mut cvar_t = 0 as *const cvar_t as *mut cvar_t;
/*
=================
S_AL_BufferLoad
=================
*/
unsafe extern "C" fn S_AL_BufferLoad(mut sfx: sfxHandle_t,
                                     mut cache: qboolean) {
    let mut error: ALenum = 0;
    let mut format: ALuint = 0;
    let mut data: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut info: snd_info_t =
        snd_info_s{rate: 0,
                   width: 0,
                   channels: 0,
                   samples: 0,
                   size: 0,
                   dataofs: 0,};
    let mut curSfx: *mut alSfx_t =
        &mut knownSfx[sfx as usize] as *mut alSfx_t;
    if (*curSfx).filename[0usize] as libc::c_int == '\u{0}' as i32 { return }
    if 0 != (*curSfx).inMemory as libc::c_uint ||
           0 != (*curSfx).isDefault as libc::c_uint ||
           0 == cache as u64 &&
               0 != (*curSfx).isDefaultChecked as libc::c_uint {
        return
    }
    data = S_CodecLoad((*curSfx).filename.as_mut_ptr(), &mut info);
    if data.is_null() { S_AL_BufferUseDefault(sfx); return }
    (*curSfx).isDefaultChecked = qtrue;
    if 0 == cache as u64 { Hunk_FreeTempMemory(data); return }
    format = S_AL_Format(info.width, info.channels);
    if 0 ==
           S_AL_GenBuffers(1i32, &mut (*curSfx).buffer,
                           (*curSfx).filename.as_mut_ptr()) as u64 {
        S_AL_BufferUseDefault(sfx);
        Hunk_FreeTempMemory(data);
        return
    }
    if info.size == 0i32 {
        let mut dummyData: [byte; 2] = [0i32 as byte, 0];
        qalBufferData.expect("non-null function pointer")((*curSfx).buffer,
                                                          0x1101i32,
                                                          dummyData.as_mut_ptr()
                                                              as
                                                              *mut libc::c_void,
                                                          2i32, 22050i32);
    } else {
        qalBufferData.expect("non-null function pointer")((*curSfx).buffer,
                                                          format as ALenum,
                                                          data, info.size,
                                                          info.rate);
    }
    error = qalGetError.expect("non-null function pointer")();
    while error == 0xa005i32 {
        if 0 == S_AL_BufferEvict() as u64 {
            qalDeleteBuffers.expect("non-null function pointer")(1i32,
                                                                 &mut (*curSfx).buffer);
            S_AL_BufferUseDefault(sfx);
            Hunk_FreeTempMemory(data);
            Com_Printf(b"^1ERROR: Out of memory loading %s\n\x00" as *const u8
                           as *const libc::c_char,
                       (*curSfx).filename.as_mut_ptr());
            return
        }
        qalBufferData.expect("non-null function pointer")((*curSfx).buffer,
                                                          format as ALenum,
                                                          data, info.size,
                                                          info.rate);
        error = qalGetError.expect("non-null function pointer")()
    }
    if error != 0i32 {
        qalDeleteBuffers.expect("non-null function pointer")(1i32,
                                                             &mut (*curSfx).buffer);
        S_AL_BufferUseDefault(sfx);
        Hunk_FreeTempMemory(data);
        Com_Printf(b"^1ERROR: Can\'t fill sound buffer for %s - %s\n\x00" as
                       *const u8 as *const libc::c_char,
                   (*curSfx).filename.as_mut_ptr(), S_AL_ErrorMsg(error));
        return
    }
    (*curSfx).info = info;
    Hunk_FreeTempMemory(data);
    (*curSfx).inMemory = qtrue;
}
/*
=================
S_AL_ErrorMsg
=================
*/
unsafe extern "C" fn S_AL_ErrorMsg(mut error: ALenum) -> *const libc::c_char {
    match error {
        0 => { return b"No error\x00" as *const u8 as *const libc::c_char }
        40961 => {
            return b"Invalid name\x00" as *const u8 as *const libc::c_char
        }
        40962 => {
            return b"Invalid enumerator\x00" as *const u8 as
                       *const libc::c_char
        }
        40963 => {
            return b"Invalid value\x00" as *const u8 as *const libc::c_char
        }
        40964 => {
            return b"Invalid operation\x00" as *const u8 as
                       *const libc::c_char
        }
        40965 => {
            return b"Out of memory\x00" as *const u8 as *const libc::c_char
        }
        _ => {
            return b"Unknown error\x00" as *const u8 as *const libc::c_char
        }
    };
}
/*
=================
S_AL_BufferUseDefault
=================
*/
unsafe extern "C" fn S_AL_BufferUseDefault(mut sfx: sfxHandle_t) {
    if sfx == default_sfx {
        Com_Error(ERR_FATAL as libc::c_int,
                  b"Can\'t load default sound effect %s\x00" as *const u8 as
                      *const libc::c_char,
                  knownSfx[sfx as usize].filename.as_mut_ptr());
    }
    Com_Printf(b"^3WARNING: Using default sound for %s\n\x00" as *const u8 as
                   *const libc::c_char,
               knownSfx[sfx as usize].filename.as_mut_ptr());
    knownSfx[sfx as usize].isDefault = qtrue;
    knownSfx[sfx as usize].buffer = knownSfx[default_sfx as usize].buffer;
}
static mut default_sfx: sfxHandle_t = 0;
/*
=================
S_AL_BufferEvict
=================
*/
unsafe extern "C" fn S_AL_BufferEvict() -> qboolean {
    let mut i: libc::c_int = 0;
    let mut oldestBuffer: libc::c_int = -1i32;
    let mut oldestTime: libc::c_int = Sys_Milliseconds();
    i = 0i32;
    while i < numSfx {
        if !(0 == knownSfx[i as usize].filename[0usize]) {
            if !(0 == knownSfx[i as usize].inMemory as u64) {
                if knownSfx[i as usize].lastUsedTime < oldestTime {
                    oldestTime = knownSfx[i as usize].lastUsedTime;
                    oldestBuffer = i
                }
            }
        }
        i += 1
    }
    if oldestBuffer >= 0i32 {
        S_AL_BufferUnload(oldestBuffer);
        return qtrue
    } else { return qfalse };
}
/*
=================
S_AL_BufferUnload
=================
*/
unsafe extern "C" fn S_AL_BufferUnload(mut sfx: sfxHandle_t) {
    if knownSfx[sfx as usize].filename[0usize] as libc::c_int ==
           '\u{0}' as i32 {
        return
    }
    if 0 == knownSfx[sfx as usize].inMemory as u64 { return }
    S_AL_ClearError(qfalse);
    qalDeleteBuffers.expect("non-null function pointer")(1i32,
                                                         &mut knownSfx[sfx as
                                                                           usize].buffer);
    if qalGetError.expect("non-null function pointer")() != 0i32 {
        Com_Printf(b"^1ERROR: Can\'t delete sound buffer for %s\n\x00" as
                       *const u8 as *const libc::c_char,
                   knownSfx[sfx as usize].filename.as_mut_ptr());
    }
    knownSfx[sfx as usize].inMemory = qfalse;
}
/*
=================
S_AL_ClearError
=================
*/
unsafe extern "C" fn S_AL_ClearError(mut quiet: qboolean) {
    let mut error: libc::c_int =
        qalGetError.expect("non-null function pointer")();
    if 0 != quiet as u64 { return }
    if error != 0i32 {
        Com_Printf(b"^3WARNING: unhandled AL error: %s\n\x00" as *const u8 as
                       *const libc::c_char, S_AL_ErrorMsg(error));
    };
}
/*
=================
S_AL_GenBuffers
=================
*/
unsafe extern "C" fn S_AL_GenBuffers(mut numBuffers: ALsizei,
                                     mut buffers: *mut ALuint,
                                     mut name: *const libc::c_char)
 -> qboolean {
    let mut error: ALenum = 0;
    S_AL_ClearError(qfalse);
    qalGenBuffers.expect("non-null function pointer")(numBuffers, buffers);
    error = qalGetError.expect("non-null function pointer")();
    while error == 0xa003i32 {
        if 0 == S_AL_BufferEvict() as u64 {
            Com_Printf(b"^1ERROR: Out of audio buffers\n\x00" as *const u8 as
                           *const libc::c_char);
            return qfalse
        }
        S_AL_ClearError(qfalse);
        qalGenBuffers.expect("non-null function pointer")(numBuffers,
                                                          buffers);
        error = qalGetError.expect("non-null function pointer")()
    }
    if error != 0i32 {
        Com_Printf(b"^1ERROR: Can\'t create a sound buffer for %s - %s\n\x00"
                       as *const u8 as *const libc::c_char, name,
                   S_AL_ErrorMsg(error));
        return qfalse
    }
    return qtrue;
}
/*
=================
S_AL_Format
=================
*/
unsafe extern "C" fn S_AL_Format(mut width: libc::c_int,
                                 mut channels: libc::c_int) -> ALuint {
    let mut format: ALuint = 0x1101i32 as ALuint;
    if width == 1i32 {
        if channels == 1i32 {
            format = 0x1100i32 as ALuint
        } else if channels == 2i32 { format = 0x1102i32 as ALuint }
    } else if width == 2i32 {
        if channels == 1i32 {
            format = 0x1101i32 as ALuint
        } else if channels == 2i32 { format = 0x1103i32 as ALuint }
    }
    return format;
}
/*
=================
S_AL_BeginRegistration
=================
*/
unsafe extern "C" fn S_AL_BeginRegistration() {
    if 0 == numSfx { S_AL_BufferInit(); };
}
/*
=================
S_AL_BufferInit
=================
*/
unsafe extern "C" fn S_AL_BufferInit() -> qboolean {
    if 0 != alBuffersInitialised as u64 { return qtrue }
    memset(knownSfx.as_mut_ptr() as *mut libc::c_void, 0i32,
           ::std::mem::size_of::<[alSfx_t; 4096]>() as libc::c_ulong);
    numSfx = 0i32;
    default_sfx =
        S_AL_BufferFind(b"sound/feedback/hit.wav\x00" as *const u8 as
                            *const libc::c_char);
    S_AL_BufferUse(default_sfx);
    knownSfx[default_sfx as usize].isLocked = qtrue;
    alBuffersInitialised = qtrue;
    return qtrue;
}
static mut alBuffersInitialised: qboolean = qfalse;
/*
=================
S_AL_BufferUse
=================
*/
unsafe extern "C" fn S_AL_BufferUse(mut sfx: sfxHandle_t) {
    if knownSfx[sfx as usize].filename[0usize] as libc::c_int ==
           '\u{0}' as i32 {
        return
    }
    if 0 == knownSfx[sfx as usize].inMemory as u64 &&
           0 == knownSfx[sfx as usize].isDefault as u64 {
        S_AL_BufferLoad(sfx, qtrue);
    }
    knownSfx[sfx as usize].lastUsedTime = Sys_Milliseconds();
}
/*
=================
S_AL_DisableSounds
=================
*/
unsafe extern "C" fn S_AL_DisableSounds() { S_AL_StopAllSounds(); }
/*
=================
S_AL_StopAllSounds
=================
*/
unsafe extern "C" fn S_AL_StopAllSounds() {
    let mut i: libc::c_int = 0;
    S_AL_SrcShutup();
    S_AL_StopBackgroundTrack();
    i = 0i32;
    while i < 64i32 * 2i32 + 1i32 { S_AL_StreamDie(i); i += 1 };
}
/*
=================
S_AL_StreamDie
=================
*/
unsafe extern "C" fn S_AL_StreamDie(mut stream: libc::c_int) {
    if stream < 0i32 || stream >= 64i32 * 2i32 + 1i32 { return }
    if streamSourceHandles[stream as usize] == -1i32 { return }
    streamPlaying[stream as usize] = qfalse;
    qalSourceStop.expect("non-null function pointer")(streamSources[stream as
                                                                        usize]);
    S_AL_FreeStreamChannel(stream);
}
/*
=================
S_AL_FreeStreamChannel
=================
*/
unsafe extern "C" fn S_AL_FreeStreamChannel(mut stream: libc::c_int) {
    if stream < 0i32 || stream >= 64i32 * 2i32 + 1i32 { return }
    qalSourcei.expect("non-null function pointer")(streamSources[stream as
                                                                     usize],
                                                   0x1009i32, 0i32);
    if streamNumBuffers[stream as usize] > 0i32 {
        qalDeleteBuffers.expect("non-null function pointer")(streamNumBuffers[stream
                                                                                  as
                                                                                  usize],
                                                             streamBuffers[stream
                                                                               as
                                                                               usize].as_mut_ptr());
        streamNumBuffers[stream as usize] = 0i32
    }
    S_AL_SrcUnlock(streamSourceHandles[stream as usize]);
    S_AL_SrcKill(streamSourceHandles[stream as usize]);
    streamSources[stream as usize] = 0i32 as ALuint;
    streamSourceHandles[stream as usize] = -1i32;
}
//===========================================================================
// Q3A cinematics use up to 12 buffers at once
static mut streamSourceHandles: [srcHandle_t; 129] = [0; 129];
static mut streamSources: [ALuint; 129] = [0; 129];
/*
=================
S_AL_SrcKill
=================
*/
unsafe extern "C" fn S_AL_SrcKill(mut src: srcHandle_t) {
    let mut curSource: *mut src_t = &mut srcList[src as usize] as *mut src_t;
    if 0 != (*curSource).isLocked as u64 { return }
    if 0 != (*curSource).isLooping as u64 {
        (*curSource).isLooping = qfalse;
        if (*curSource).entity != -1i32 {
            let mut curEnt: *mut sentity_t =
                &mut entityList[(*curSource).entity as usize] as
                    *mut sentity_t;
            (*curEnt).srcAllocated = qfalse;
            (*curEnt).srcIndex = -1i32;
            (*curEnt).loopAddedThisFrame = qfalse;
            (*curEnt).startLoopingSound = qfalse
        }
        S_AL_NewLoopMaster(curSource, qtrue);
    }
    if 0 != (*curSource).isPlaying as u64 {
        qalSourceStop.expect("non-null function pointer")((*curSource).alSource);
        (*curSource).isPlaying = qfalse
    }
    qalSourcei.expect("non-null function pointer")((*curSource).alSource,
                                                   0x1009i32, 0i32);
    (*curSource).sfx = 0i32;
    (*curSource).lastUsedTime = 0i32;
    (*curSource).priority = SRCPRI_AMBIENT;
    (*curSource).entity = -1i32;
    (*curSource).channel = -1i32;
    if 0 != (*curSource).isActive as u64 {
        (*curSource).isActive = qfalse;
        srcActiveCnt -= 1
    }
    (*curSource).isLocked = qfalse;
    (*curSource).isTracking = qfalse;
    (*curSource).local = qfalse;
}
static mut srcList: [src_t; 128] =
    [src_s{alSource: 0,
           sfx: 0,
           lastUsedTime: 0,
           priority: SRCPRI_AMBIENT,
           entity: 0,
           channel: 0,
           isActive: qfalse,
           isPlaying: qfalse,
           isLocked: qfalse,
           isLooping: qfalse,
           isTracking: qfalse,
           isStream: qfalse,
           curGain: 0.,
           scaleGain: 0.,
           lastTimePos: 0.,
           lastSampleTime: 0,
           loopSpeakerPos: [0.; 3],
           local: qfalse,}; 128];
static mut srcActiveCnt: libc::c_int = 0i32;
/*
=================
S_AL_NewLoopMaster
Remove given source as loop master if it is the master and hand off master status to another source in this case.
=================
*/
unsafe extern "C" fn S_AL_NewLoopMaster(mut rmSource: *mut src_t,
                                        mut iskilled: qboolean) {
    let mut index: libc::c_int = 0;
    let mut curSource: *mut src_t = 0 as *mut src_t;
    let mut curSfx: *mut alSfx_t = 0 as *mut alSfx_t;
    curSfx = &mut knownSfx[(*rmSource).sfx as usize] as *mut alSfx_t;
    if 0 != (*rmSource).isPlaying as u64 { (*curSfx).loopActiveCnt -= 1 }
    if 0 != iskilled as u64 { (*curSfx).loopCnt -= 1 }
    if 0 != (*curSfx).loopCnt {
        if (*rmSource).priority as libc::c_uint ==
               SRCPRI_ENTITY as libc::c_int as libc::c_uint {
            if 0 == iskilled as u64 &&
                   0 != (*rmSource).isPlaying as libc::c_uint {
                S_AL_SaveLoopPos(rmSource, (*rmSource).alSource);
            }
        } else if (*curSfx).masterLoopSrc != -1i32 &&
                      rmSource ==
                          &mut srcList[(*curSfx).masterLoopSrc as usize] as
                              *mut src_t {
            let mut firstInactive: libc::c_int = -1i32;
            if 0 != iskilled as libc::c_uint || 0 != (*curSfx).loopActiveCnt {
                index = 0i32;
                while index < srcCount {
                    curSource = &mut srcList[index as usize] as *mut src_t;
                    if (*curSource).sfx == (*rmSource).sfx &&
                           curSource != rmSource &&
                           0 != (*curSource).isActive as libc::c_uint &&
                           0 != (*curSource).isLooping as libc::c_uint &&
                           (*curSource).priority as libc::c_uint ==
                               SRCPRI_AMBIENT as libc::c_int as libc::c_uint {
                        if 0 != (*curSource).isPlaying as u64 {
                            (*curSfx).masterLoopSrc = index;
                            break ;
                        } else if firstInactive < 0i32 {
                            firstInactive = index
                        }
                    }
                    index += 1
                }
            }
            if 0 == (*curSfx).loopActiveCnt {
                if firstInactive < 0i32 {
                    if 0 != iskilled as u64 {
                        (*curSfx).masterLoopSrc = -1i32;
                        return
                    } else { curSource = rmSource }
                } else {
                    curSource =
                        &mut srcList[firstInactive as usize] as *mut src_t
                }
                if 0 != (*rmSource).isPlaying as u64 {
                    S_AL_SaveLoopPos(curSource, (*rmSource).alSource);
                } else {
                    (*curSource).lastTimePos = (*rmSource).lastTimePos;
                    (*curSource).lastSampleTime = (*rmSource).lastSampleTime
                }
            }
        }
    } else { (*curSfx).masterLoopSrc = -1i32 };
}
/*
=================
S_AL_SaveLoopPos
Remove given source as loop master if it is the master and hand off master status to another source in this case.
=================
*/
unsafe extern "C" fn S_AL_SaveLoopPos(mut dest: *mut src_t,
                                      mut alSource: ALuint) {
    let mut error: libc::c_int = 0;
    S_AL_ClearError(qfalse);
    qalGetSourcef.expect("non-null function pointer")(alSource, 0x1024i32,
                                                      &mut (*dest).lastTimePos);
    error = qalGetError.expect("non-null function pointer")();
    if error != 0i32 {
        if error != 0xa002i32 {
            Com_Printf(b"^3WARNING: Could not get time offset for alSource %d: %s\n\x00"
                           as *const u8 as *const libc::c_char, alSource,
                       S_AL_ErrorMsg(error));
        }
        (*dest).lastTimePos = -1i32 as libc::c_float
    } else { (*dest).lastSampleTime = Sys_Milliseconds() };
}
static mut srcCount: libc::c_int = 0i32;
static mut entityList: [sentity_t; 1024] =
    [sentity_s{origin: [0.; 3],
               srcAllocated: qfalse,
               srcIndex: 0,
               loopAddedThisFrame: qfalse,
               loopPriority: SRCPRI_AMBIENT,
               loopSfx: 0,
               startLoopingSound: qfalse,}; 1024];
/*
=================
S_AL_SrcUnlock

Once unlocked, the source may be reallocated again
=================
*/
unsafe extern "C" fn S_AL_SrcUnlock(mut src: srcHandle_t) {
    srcList[src as usize].isLocked = qfalse;
}
static mut streamNumBuffers: [libc::c_int; 129] = [0; 129];
static mut streamBuffers: [[ALuint; 20]; 129] = [[0; 20]; 129];
static mut streamPlaying: [qboolean; 129] = [qfalse; 129];
/*
=================
S_AL_StopBackgroundTrack
=================
*/
unsafe extern "C" fn S_AL_StopBackgroundTrack() {
    if 0 == musicPlaying as u64 { return }
    qalSourceStop.expect("non-null function pointer")(musicSource);
    qalSourcei.expect("non-null function pointer")(musicSource, 0x1009i32,
                                                   0i32);
    qalDeleteBuffers.expect("non-null function pointer")(4i32,
                                                         musicBuffers.as_mut_ptr());
    S_AL_MusicSourceFree();
    S_AL_CloseMusicFiles();
    musicPlaying = qfalse;
}
//===========================================================================
static mut musicPlaying: qboolean = qfalse;
/*
=================
S_AL_CloseMusicFiles
=================
*/
unsafe extern "C" fn S_AL_CloseMusicFiles() {
    if !intro_stream.is_null() {
        S_CodecCloseStream(intro_stream);
        intro_stream = 0 as *mut snd_stream_t
    }
    if !mus_stream.is_null() {
        S_CodecCloseStream(mus_stream);
        mus_stream = 0 as *mut snd_stream_t
    };
}
static mut mus_stream: *mut snd_stream_t =
    0 as *const snd_stream_t as *mut snd_stream_t;
static mut intro_stream: *mut snd_stream_t =
    0 as *const snd_stream_t as *mut snd_stream_t;
/*
=================
S_AL_MusicSourceFree
=================
*/
unsafe extern "C" fn S_AL_MusicSourceFree() {
    S_AL_SrcUnlock(musicSourceHandle);
    S_AL_SrcKill(musicSourceHandle);
    musicSource = 0i32 as ALuint;
    musicSourceHandle = -1i32;
}
static mut musicSourceHandle: srcHandle_t = -1i32;
static mut musicSource: ALuint = 0;
static mut musicBuffers: [ALuint; 4] = [0; 4];
/*
=================
S_AL_SrcShutup
=================
*/
unsafe extern "C" fn S_AL_SrcShutup() {
    let mut i: libc::c_int = 0;
    i = 0i32;
    while i < srcCount { S_AL_SrcKill(i); i += 1 };
}
/*
=================
S_AL_Update
=================
*/
unsafe extern "C" fn S_AL_Update() {
    let mut i: libc::c_int = 0;
    if 0 != (*s_muted).modified as u64 {
        i = 0i32;
        while i < srcCount {
            if 0 != srcList[i as usize].isActive as u64 {
                S_AL_Gain(srcList[i as usize].alSource,
                          srcList[i as usize].scaleGain);
            }
            i += 1
        }
        (*s_muted).modified = qfalse
    }
    S_AL_SrcUpdate();
    i = 0i32;
    while i < 64i32 * 2i32 + 1i32 { S_AL_StreamUpdate(i); i += 1 }
    S_AL_MusicUpdate();
    if 0 != (*s_doppler).modified as u64 {
        (*s_alDopplerFactor).modified = qtrue;
        (*s_doppler).modified = qfalse
    }
    if 0 != (*s_alDopplerFactor).modified as u64 {
        if 0 != (*s_doppler).integer {
            qalDopplerFactor.expect("non-null function pointer")((*s_alDopplerFactor).value);
        } else {
            qalDopplerFactor.expect("non-null function pointer")(0.0f32);
        }
        (*s_alDopplerFactor).modified = qfalse
    }
    if 0 != (*s_alDopplerSpeed).modified as u64 {
        qalSpeedOfSound.expect("non-null function pointer")((*s_alDopplerSpeed).value);
        (*s_alDopplerSpeed).modified = qfalse
    }
    (*s_alGain).modified = qfalse;
    (*s_volume).modified = qfalse;
    (*s_musicVolume).modified = qfalse;
    (*s_alMinDistance).modified = qfalse;
    (*s_alRolloff).modified = qfalse;
}
#[no_mangle]
pub static mut s_alRolloff: *mut cvar_t = 0 as *const cvar_t as *mut cvar_t;
#[no_mangle]
pub static mut s_alMinDistance: *mut cvar_t =
    0 as *const cvar_t as *mut cvar_t;
#[no_mangle]
pub static mut s_alGain: *mut cvar_t = 0 as *const cvar_t as *mut cvar_t;
#[no_mangle]
pub static mut s_alDopplerSpeed: *mut cvar_t =
    0 as *const cvar_t as *mut cvar_t;
#[no_mangle]
pub static mut s_alDopplerFactor: *mut cvar_t =
    0 as *const cvar_t as *mut cvar_t;
/*
=================
S_AL_MusicUpdate
=================
*/
unsafe extern "C" fn S_AL_MusicUpdate() {
    let mut numBuffers: libc::c_int = 0;
    let mut state: ALint = 0;
    if 0 == musicPlaying as u64 { return }
    qalGetSourcei.expect("non-null function pointer")(musicSource, 0x1016i32,
                                                      &mut numBuffers);
    loop  {
        let fresh0 = numBuffers;
        numBuffers = numBuffers - 1;
        if !(0 != fresh0) { break ; }
        let mut b: ALuint = 0;
        qalSourceUnqueueBuffers.expect("non-null function pointer")(musicSource,
                                                                    1i32,
                                                                    &mut b);
        S_AL_MusicProcess(b);
        qalSourceQueueBuffers.expect("non-null function pointer")(musicSource,
                                                                  1i32,
                                                                  &mut b);
    }
    qalGetSourcei.expect("non-null function pointer")(musicSource, 0x1010i32,
                                                      &mut state);
    qalGetSourcei.expect("non-null function pointer")(musicSource, 0x1015i32,
                                                      &mut numBuffers);
    if state == 0x1014i32 && 0 != numBuffers {
        Com_DPrintf(b"^3Restarted OpenAL music\n\x00" as *const u8 as
                        *const libc::c_char);
        qalSourcePlay.expect("non-null function pointer")(musicSource);
    }
    S_AL_Gain(musicSource, (*s_alGain).value * (*s_musicVolume).value);
}
/*
=================
S_AL_Gain
Set gain to 0 if muted, otherwise set it to given value.
=================
*/
unsafe extern "C" fn S_AL_Gain(mut source: ALuint,
                               mut gainval: libc::c_float) {
    if 0 != (*s_muted).integer {
        qalSourcef.expect("non-null function pointer")(source, 0x100ai32,
                                                       0.0f32);
    } else {
        qalSourcef.expect("non-null function pointer")(source, 0x100ai32,
                                                       gainval);
    };
}
/*
=================
S_AL_MusicProcess
=================
*/
unsafe extern "C" fn S_AL_MusicProcess(mut b: ALuint) {
    let mut error: ALenum = 0;
    let mut l: libc::c_int = 0;
    let mut format: ALuint = 0;
    let mut curstream: *mut snd_stream_t = 0 as *mut snd_stream_t;
    S_AL_ClearError(qfalse);
    if !intro_stream.is_null() {
        curstream = intro_stream
    } else { curstream = mus_stream }
    if curstream.is_null() { return }
    l =
        S_CodecReadStream(curstream, 4096i32,
                          decode_buffer.as_mut_ptr() as *mut libc::c_void);
    if l == 0i32 {
        S_CodecCloseStream(curstream);
        if !intro_stream.is_null() {
            intro_stream = 0 as *mut snd_stream_t
        } else {
            mus_stream = S_CodecOpenStream(s_backgroundLoop.as_mut_ptr())
        }
        curstream = mus_stream;
        if curstream.is_null() { S_AL_StopBackgroundTrack(); return }
        l =
            S_CodecReadStream(curstream, 4096i32,
                              decode_buffer.as_mut_ptr() as *mut libc::c_void)
    }
    format = S_AL_Format((*curstream).info.width, (*curstream).info.channels);
    if l == 0i32 {
        let mut dummyData: [byte; 2] = [0i32 as byte, 0];
        qalBufferData.expect("non-null function pointer")(b, 0x1101i32,
                                                          dummyData.as_mut_ptr()
                                                              as
                                                              *mut libc::c_void,
                                                          2i32, 22050i32);
    } else {
        qalBufferData.expect("non-null function pointer")(b, format as ALenum,
                                                          decode_buffer.as_mut_ptr()
                                                              as
                                                              *const libc::c_void,
                                                          l,
                                                          (*curstream).info.rate);
    }
    error = qalGetError.expect("non-null function pointer")();
    if error != 0i32 {
        S_AL_StopBackgroundTrack();
        Com_Printf(b"^1ERROR: while buffering data for music stream - %s\n\x00"
                       as *const u8 as *const libc::c_char,
                   S_AL_ErrorMsg(error));
        return
    };
}
static mut decode_buffer: [byte; 4096] = [0; 4096];
static mut s_backgroundLoop: [libc::c_char; 64] = [0; 64];
/*
=================
S_AL_StreamUpdate
=================
*/
unsafe extern "C" fn S_AL_StreamUpdate(mut stream: libc::c_int) {
    let mut numBuffers: libc::c_int = 0;
    let mut state: ALint = 0;
    if stream < 0i32 || stream >= 64i32 * 2i32 + 1i32 { return }
    if streamSourceHandles[stream as usize] == -1i32 { return }
    qalGetSourcei.expect("non-null function pointer")(streamSources[stream as
                                                                        usize],
                                                      0x1016i32,
                                                      &mut numBuffers);
    loop  {
        let fresh1 = numBuffers;
        numBuffers = numBuffers - 1;
        if !(0 != fresh1) { break ; }
        let mut buffer: ALuint = 0;
        qalSourceUnqueueBuffers.expect("non-null function pointer")(streamSources[stream
                                                                                      as
                                                                                      usize],
                                                                    1i32,
                                                                    &mut buffer);
    }
    qalGetSourcei.expect("non-null function pointer")(streamSources[stream as
                                                                        usize],
                                                      0x1015i32,
                                                      &mut numBuffers);
    qalGetSourcei.expect("non-null function pointer")(streamSources[stream as
                                                                        usize],
                                                      0x1010i32, &mut state);
    if state == 0x1014i32 {
        streamPlaying[stream as usize] = qfalse;
        if 0 == numBuffers { S_AL_FreeStreamChannel(stream); }
    }
    if 0 == streamPlaying[stream as usize] as u64 && 0 != numBuffers {
        qalSourcePlay.expect("non-null function pointer")(streamSources[stream
                                                                            as
                                                                            usize]);
        streamPlaying[stream as usize] = qtrue
    };
}
/*
=================
S_AL_SrcUpdate

Update state (move things around, manage sources, and so on)
=================
*/
unsafe extern "C" fn S_AL_SrcUpdate() {
    let mut i: libc::c_int = 0;
    let mut entityNum: libc::c_int = 0;
    let mut state: ALint = 0;
    let mut curSource: *mut src_t = 0 as *mut src_t;
    let mut current_block_85: u64;
    i = 0i32;
    while i < srcCount {
        entityNum = srcList[i as usize].entity;
        curSource = &mut srcList[i as usize] as *mut src_t;
        if !(0 != (*curSource).isLocked as u64) {
            if !(0 == (*curSource).isActive as u64) {
                if 0 != (*s_alGain).modified as libc::c_uint ||
                       0 != (*s_volume).modified as libc::c_uint {
                    (*curSource).curGain =
                        (*s_alGain).value * (*s_volume).value
                }
                if 0 != (*s_alRolloff).modified as libc::c_uint &&
                       0 == (*curSource).local as u64 {
                    qalSourcef.expect("non-null function pointer")((*curSource).alSource,
                                                                   0x1021i32,
                                                                   (*s_alRolloff).value);
                }
                if 0 != (*s_alMinDistance).modified as u64 {
                    qalSourcef.expect("non-null function pointer")((*curSource).alSource,
                                                                   0x1020i32,
                                                                   (*s_alMinDistance).value);
                }
                if 0 != (*curSource).isLooping as u64 {
                    let mut sent: *mut sentity_t =
                        &mut entityList[entityNum as usize] as *mut sentity_t;
                    // If a looping effect hasn't been touched this frame, pause or kill it
                    if 0 != (*sent).loopAddedThisFrame as u64 {
                        let mut curSfx: *mut alSfx_t = 0 as *mut alSfx_t;
                        if 0 != (*curSource).isActive as libc::c_uint &&
                               0 == (*sent).startLoopingSound as u64 &&
                               (*curSource).sfx != (*sent).loopSfx {
                            S_AL_NewLoopMaster(curSource, qtrue);
                            (*curSource).isPlaying = qfalse;
                            qalSourceStop.expect("non-null function pointer")((*curSource).alSource);
                            qalSourcei.expect("non-null function pointer")((*curSource).alSource,
                                                                           0x1009i32,
                                                                           0i32);
                            (*sent).startLoopingSound = qtrue
                        }
                        if 0 != (*sent).startLoopingSound as u64 {
                            S_AL_SrcSetup(i, (*sent).loopSfx,
                                          (*sent).loopPriority, entityNum,
                                          -1i32, (*curSource).local);
                            (*curSource).isLooping = qtrue;
                            knownSfx[(*curSource).sfx as usize].loopCnt += 1;
                            (*sent).startLoopingSound = qfalse
                        }
                        curSfx =
                            &mut knownSfx[(*curSource).sfx as usize] as
                                *mut alSfx_t;
                        S_AL_ScaleGain(curSource,
                                       (*curSource).loopSpeakerPos.as_mut_ptr());
                        if 0. == (*curSource).scaleGain {
                            if 0 != (*curSource).isPlaying as u64 {
                                S_AL_NewLoopMaster(curSource, qfalse);
                                qalSourceStop.expect("non-null function pointer")((*curSource).alSource);
                                (*curSource).isPlaying = qfalse
                            } else if 0 == (*curSfx).loopActiveCnt &&
                                          (*curSfx).masterLoopSrc < 0i32 {
                                (*curSfx).masterLoopSrc = i
                            }
                        } else {
                            if 0 == (*curSource).isPlaying as u64 {
                                qalSourcei.expect("non-null function pointer")((*curSource).alSource,
                                                                               0x1007i32,
                                                                               1i32);
                                (*curSource).isPlaying = qtrue;
                                qalSourcePlay.expect("non-null function pointer")((*curSource).alSource);
                                if (*curSource).priority as libc::c_uint ==
                                       SRCPRI_AMBIENT as libc::c_int as
                                           libc::c_uint {
                                    if 0 != (*curSfx).loopActiveCnt {
                                        let mut offset: libc::c_int = 0;
                                        let mut error: libc::c_int = 0;
                                        S_AL_ClearError(qfalse);
                                        qalGetSourcei.expect("non-null function pointer")(srcList[(*curSfx).masterLoopSrc
                                                                                                      as
                                                                                                      usize].alSource,
                                                                                          0x1025i32,
                                                                                          &mut offset);
                                        error =
                                            qalGetError.expect("non-null function pointer")();
                                        if error != 0i32 {
                                            if error != 0xa002i32 {
                                                Com_Printf(b"^3WARNING: Cannot get sample offset from source %d: %s\n\x00"
                                                               as *const u8 as
                                                               *const libc::c_char,
                                                           i,
                                                           S_AL_ErrorMsg(error));
                                            }
                                        } else {
                                            qalSourcei.expect("non-null function pointer")((*curSource).alSource,
                                                                                           0x1025i32,
                                                                                           offset);
                                        }
                                    } else if 0 != (*curSfx).loopCnt &&
                                                  (*curSfx).masterLoopSrc >=
                                                      0i32 {
                                        let mut secofs: libc::c_float = 0.;
                                        let mut master: *mut src_t =
                                            &mut srcList[(*curSfx).masterLoopSrc
                                                             as usize] as
                                                *mut src_t;
                                        if (*master).lastTimePos >=
                                               0i32 as libc::c_float {
                                            secofs =
                                                (*master).lastTimePos +
                                                    (Sys_Milliseconds() -
                                                         (*master).lastSampleTime)
                                                        as libc::c_float /
                                                        1000.0f32;
                                            secofs =
                                                fmodf(secofs,
                                                      (*curSfx).info.samples
                                                          as libc::c_float /
                                                          (*curSfx).info.rate
                                                              as
                                                              libc::c_float);
                                            qalSourcef.expect("non-null function pointer")((*curSource).alSource,
                                                                                           0x1024i32,
                                                                                           secofs);
                                        }
                                        (*curSfx).masterLoopSrc = i
                                    } else { (*curSfx).masterLoopSrc = i }
                                } else if (*curSource).lastTimePos >=
                                              0i32 as libc::c_float {
                                    let mut secofs_0: libc::c_float = 0.;
                                    secofs_0 =
                                        (*curSource).lastTimePos +
                                            (Sys_Milliseconds() -
                                                 (*curSource).lastSampleTime)
                                                as libc::c_float / 1000.0f32;
                                    secofs_0 =
                                        fmodf(secofs_0,
                                              (*curSfx).info.samples as
                                                  libc::c_float /
                                                  (*curSfx).info.rate as
                                                      libc::c_float);
                                    qalSourcef.expect("non-null function pointer")((*curSource).alSource,
                                                                                   0x1024i32,
                                                                                   secofs_0);
                                }
                                (*curSfx).loopActiveCnt += 1
                            }
                            if 0 != (*curSource).local as u64 {
                                qalSourcei.expect("non-null function pointer")((*curSource).alSource,
                                                                               0x202i32,
                                                                               1i32);
                                qalSourcef.expect("non-null function pointer")((*curSource).alSource,
                                                                               0x1021i32,
                                                                               0.0f32);
                            } else {
                                qalSourcei.expect("non-null function pointer")((*curSource).alSource,
                                                                               0x202i32,
                                                                               0i32);
                                qalSourcef.expect("non-null function pointer")((*curSource).alSource,
                                                                               0x1021i32,
                                                                               (*s_alRolloff).value);
                            }
                        }
                    } else if (*curSource).priority as libc::c_uint ==
                                  SRCPRI_AMBIENT as libc::c_int as
                                      libc::c_uint {
                        if 0 != (*curSource).isPlaying as u64 {
                            S_AL_NewLoopMaster(curSource, qfalse);
                            qalSourceStop.expect("non-null function pointer")((*curSource).alSource);
                            (*curSource).isPlaying = qfalse
                        }
                    } else { S_AL_SrcKill(i); }
                } else {
                    if 0 == (*curSource).isStream as u64 {
                        qalGetSourcei.expect("non-null function pointer")((*curSource).alSource,
                                                                          0x1010i32,
                                                                          &mut state);
                        if state == 0x1014i32 {
                            (*curSource).isPlaying = qfalse;
                            S_AL_SrcKill(i);
                            current_block_85 = 12675440807659640239;
                        } else { current_block_85 = 10261677128829721533; }
                    } else { current_block_85 = 10261677128829721533; }
                    match current_block_85 {
                        12675440807659640239 => { }
                        _ => {
                            qalGetSourcei.expect("non-null function pointer")((*curSource).alSource,
                                                                              0x202i32,
                                                                              &mut state);
                            if 0 != (*curSource).isTracking as libc::c_uint &&
                                   0 == state {
                                qalSourcefv.expect("non-null function pointer")((*curSource).alSource,
                                                                                0x1004i32,
                                                                                entityList[entityNum
                                                                                               as
                                                                                               usize].origin.as_mut_ptr());
                                S_AL_ScaleGain(curSource,
                                               entityList[entityNum as
                                                              usize].origin.as_mut_ptr());
                            }
                        }
                    }
                }
            }
        }
        i += 1
    };
}
/*
=================
S_AL_ScaleGain
Adapt the gain if necessary to get a quicker fadeout when the source is too far away.
=================
*/
unsafe extern "C" fn S_AL_ScaleGain(mut chksrc: *mut src_t,
                                    mut origin: *mut vec_t) {
    let mut distance: libc::c_float = 0.;
    if 0 == (*chksrc).local as u64 {
        distance =
            Distance(origin as *const vec_t,
                     lastListenerOrigin.as_mut_ptr() as *const vec_t)
    }
    if 0 == (*chksrc).local as u64 &&
           {
               distance -= (*s_alMaxDistance).value;
               distance > 0i32 as libc::c_float
           } {
        let mut scaleFactor: libc::c_float = 0.;
        if distance >= (*s_alGraceDistance).value {
            scaleFactor = 0.0f32
        } else {
            scaleFactor = 1.0f32 - distance / (*s_alGraceDistance).value
        }
        scaleFactor *= (*chksrc).curGain;
        if (*chksrc).scaleGain != scaleFactor {
            (*chksrc).scaleGain = scaleFactor;
            S_AL_Gain((*chksrc).alSource, (*chksrc).scaleGain);
        }
    } else if (*chksrc).scaleGain != (*chksrc).curGain {
        (*chksrc).scaleGain = (*chksrc).curGain;
        S_AL_Gain((*chksrc).alSource, (*chksrc).scaleGain);
    };
}
#[no_mangle]
pub static mut s_alGraceDistance: *mut cvar_t =
    0 as *const cvar_t as *mut cvar_t;
#[no_mangle]
pub static mut s_alMaxDistance: *mut cvar_t =
    0 as *const cvar_t as *mut cvar_t;
static mut lastListenerOrigin: vec3_t = [0.0f32, 0.0f32, 0.0f32];
/*
=================
S_AL_SrcSetup
=================
*/
unsafe extern "C" fn S_AL_SrcSetup(mut src: srcHandle_t, mut sfx: sfxHandle_t,
                                   mut priority: alSrcPriority_t,
                                   mut entity: libc::c_int,
                                   mut channel: libc::c_int,
                                   mut local: qboolean) {
    let mut curSource: *mut src_t = 0 as *mut src_t;
    curSource = &mut srcList[src as usize] as *mut src_t;
    (*curSource).lastUsedTime = Sys_Milliseconds();
    (*curSource).sfx = sfx;
    (*curSource).priority = priority;
    (*curSource).entity = entity;
    (*curSource).channel = channel;
    (*curSource).isPlaying = qfalse;
    (*curSource).isLocked = qfalse;
    (*curSource).isLooping = qfalse;
    (*curSource).isTracking = qfalse;
    (*curSource).isStream = qfalse;
    (*curSource).curGain = (*s_alGain).value * (*s_volume).value;
    (*curSource).scaleGain = (*curSource).curGain;
    (*curSource).local = local;
    if sfx >= 0i32 {
        S_AL_BufferUse(sfx);
        qalSourcei.expect("non-null function pointer")((*curSource).alSource,
                                                       0x1009i32,
                                                       S_AL_BufferGet(sfx) as
                                                           ALint);
    }
    qalSourcef.expect("non-null function pointer")((*curSource).alSource,
                                                   0x1003i32, 1.0f32);
    S_AL_Gain((*curSource).alSource, (*curSource).curGain);
    qalSourcefv.expect("non-null function pointer")((*curSource).alSource,
                                                    0x1004i32,
                                                    vec3_origin.as_mut_ptr());
    qalSourcefv.expect("non-null function pointer")((*curSource).alSource,
                                                    0x1006i32,
                                                    vec3_origin.as_mut_ptr());
    qalSourcei.expect("non-null function pointer")((*curSource).alSource,
                                                   0x1007i32, 0i32);
    qalSourcef.expect("non-null function pointer")((*curSource).alSource,
                                                   0x1020i32,
                                                   (*s_alMinDistance).value);
    if 0 != local as u64 {
        qalSourcei.expect("non-null function pointer")((*curSource).alSource,
                                                       0x202i32, 1i32);
        qalSourcef.expect("non-null function pointer")((*curSource).alSource,
                                                       0x1021i32, 0.0f32);
    } else {
        qalSourcei.expect("non-null function pointer")((*curSource).alSource,
                                                       0x202i32, 0i32);
        qalSourcef.expect("non-null function pointer")((*curSource).alSource,
                                                       0x1021i32,
                                                       (*s_alRolloff).value);
    };
}
/*
=================
S_AL_BufferGet

Return's a sfx's buffer
=================
*/
unsafe extern "C" fn S_AL_BufferGet(mut sfx: sfxHandle_t) -> ALuint {
    return knownSfx[sfx as usize].buffer;
}
/*
=================
S_AL_UpdateEntityPosition
=================
*/
unsafe extern "C" fn S_AL_UpdateEntityPosition(mut entityNum: libc::c_int,
                                               mut origin: *const vec_t) {
    let mut sanOrigin: vec3_t = [0.; 3];
    sanOrigin[0usize] = *origin.offset(0isize);
    sanOrigin[1usize] = *origin.offset(1isize);
    sanOrigin[2usize] = *origin.offset(2isize);
    _S_AL_SanitiseVector(sanOrigin.as_mut_ptr(), 1175i32);
    if entityNum < 0i32 || entityNum >= 1i32 << 10i32 {
        Com_Error(ERR_DROP as libc::c_int,
                  b"S_UpdateEntityPosition: bad entitynum %i\x00" as *const u8
                      as *const libc::c_char, entityNum);
    }
    entityList[entityNum as usize].origin[0usize] = sanOrigin[0usize];
    entityList[entityNum as usize].origin[1usize] = sanOrigin[1usize];
    entityList[entityNum as usize].origin[2usize] = sanOrigin[2usize];
}
/*
=================
S_AL_SanitiseVector
=================
*/
unsafe extern "C" fn _S_AL_SanitiseVector(mut v: *mut vec_t,
                                          mut line: libc::c_int) {
    if 0 != Q_isnan(*v.offset(0isize)) || 0 != Q_isnan(*v.offset(1isize)) ||
           0 != Q_isnan(*v.offset(2isize)) {
        Com_DPrintf(b"^3WARNING: vector with one or more NaN components being passed to OpenAL at %s:%d -- zeroing\n\x00"
                        as *const u8 as *const libc::c_char,
                    b"code/client/snd_openal.c\x00" as *const u8 as
                        *const libc::c_char, line);
        let ref mut fresh3 = *v.offset(1isize);
        let ref mut fresh2 = *v.offset(2isize);
        *fresh2 = 0i32 as vec_t;
        *fresh3 = *fresh2;
        *v.offset(0isize) = *fresh3
    };
}
/*
=================
S_AL_Respatialize
=================
*/
unsafe extern "C" fn S_AL_Respatialize(mut entityNum: libc::c_int,
                                       mut origin: *const vec_t,
                                       mut axis: *mut vec3_t,
                                       mut inwater: libc::c_int) {
    let mut orientation: [libc::c_float; 6] = [0.; 6];
    let mut sorigin: vec3_t = [0.; 3];
    sorigin[0usize] = *origin.offset(0isize);
    sorigin[1usize] = *origin.offset(1isize);
    sorigin[2usize] = *origin.offset(2isize);
    _S_AL_SanitiseVector(sorigin.as_mut_ptr(), 2249i32);
    _S_AL_SanitiseVector((*axis.offset(0isize)).as_mut_ptr(), 2251i32);
    _S_AL_SanitiseVector((*axis.offset(1isize)).as_mut_ptr(), 2252i32);
    _S_AL_SanitiseVector((*axis.offset(2isize)).as_mut_ptr(), 2253i32);
    orientation[0usize] = (*axis.offset(0isize))[0usize];
    orientation[1usize] = (*axis.offset(0isize))[1usize];
    orientation[2usize] = (*axis.offset(0isize))[2usize];
    orientation[3usize] = (*axis.offset(2isize))[0usize];
    orientation[4usize] = (*axis.offset(2isize))[1usize];
    orientation[5usize] = (*axis.offset(2isize))[2usize];
    lastListenerNumber = entityNum;
    lastListenerOrigin[0usize] = sorigin[0usize];
    lastListenerOrigin[1usize] = sorigin[1usize];
    lastListenerOrigin[2usize] = sorigin[2usize];
    qalListenerfv.expect("non-null function pointer")(0x1004i32,
                                                      sorigin.as_mut_ptr());
    qalListenerfv.expect("non-null function pointer")(0x1006i32,
                                                      vec3_origin.as_mut_ptr());
    qalListenerfv.expect("non-null function pointer")(0x100fi32,
                                                      orientation.as_mut_ptr());
}
static mut lastListenerNumber: libc::c_int = -1i32;
/*
=================
S_AL_StopLoopingSound
=================
*/
unsafe extern "C" fn S_AL_StopLoopingSound(mut entityNum: libc::c_int) {
    if 0 != entityList[entityNum as usize].srcAllocated as u64 {
        S_AL_SrcKill(entityList[entityNum as usize].srcIndex);
    };
}
/*
=================
S_AL_AddRealLoopingSound
=================
*/
unsafe extern "C" fn S_AL_AddRealLoopingSound(mut entityNum: libc::c_int,
                                              mut origin: *const vec_t,
                                              mut velocity: *const vec_t,
                                              mut sfx: sfxHandle_t) {
    S_AL_SrcLoop(SRCPRI_AMBIENT, sfx, origin, velocity, entityNum);
}
/*
=================
S_AL_SrcLoop
=================
*/
unsafe extern "C" fn S_AL_SrcLoop(mut priority: alSrcPriority_t,
                                  mut sfx: sfxHandle_t,
                                  mut origin: *const vec_t,
                                  mut velocity: *const vec_t,
                                  mut entityNum: libc::c_int) {
    let mut src: libc::c_int = 0;
    let mut sent: *mut sentity_t =
        &mut entityList[entityNum as usize] as *mut sentity_t;
    let mut curSource: *mut src_t = 0 as *mut src_t;
    let mut sorigin: vec3_t = [0.; 3];
    let mut svelocity: vec3_t = [0.; 3];
    if 0 != S_AL_CheckInput(entityNum, sfx) as u64 { return }
    if 0 == (*sent).srcAllocated as u64 {
        src = S_AL_SrcAlloc(priority, entityNum, -1i32);
        if src == -1i32 {
            Com_DPrintf(b"^3WARNING: Failed to allocate source for loop sfx %d on entity %d\n\x00"
                            as *const u8 as *const libc::c_char, sfx,
                        entityNum);
            return
        }
        curSource = &mut srcList[src as usize] as *mut src_t;
        (*sent).startLoopingSound = qtrue;
        (*curSource).lastTimePos = -1.0f64 as libc::c_float;
        (*curSource).lastSampleTime = Sys_Milliseconds()
    } else {
        src = (*sent).srcIndex;
        curSource = &mut srcList[src as usize] as *mut src_t
    }
    (*sent).srcAllocated = qtrue;
    (*sent).srcIndex = src;
    (*sent).loopPriority = priority;
    (*sent).loopSfx = sfx;
    (*sent).loopAddedThisFrame = qtrue;
    (*curSource).entity = entityNum;
    (*curSource).isLooping = qtrue;
    if 0 != S_AL_HearingThroughEntity(entityNum) as u64 {
        (*curSource).local = qtrue;
        sorigin[2usize] = 0i32 as vec_t;
        sorigin[1usize] = sorigin[2usize];
        sorigin[0usize] = sorigin[1usize];
        qalSourcefv.expect("non-null function pointer")((*curSource).alSource,
                                                        0x1004i32,
                                                        sorigin.as_mut_ptr());
        qalSourcefv.expect("non-null function pointer")((*curSource).alSource,
                                                        0x1006i32,
                                                        vec3_origin.as_mut_ptr());
    } else {
        (*curSource).local = qfalse;
        if !origin.is_null() {
            sorigin[0usize] = *origin.offset(0isize);
            sorigin[1usize] = *origin.offset(1isize);
            sorigin[2usize] = *origin.offset(2isize)
        } else {
            sorigin[0usize] = (*sent).origin[0usize];
            sorigin[1usize] = (*sent).origin[1usize];
            sorigin[2usize] = (*sent).origin[2usize]
        }
        _S_AL_SanitiseVector(sorigin.as_mut_ptr(), 1386i32);
        (*curSource).loopSpeakerPos[0usize] = sorigin[0usize];
        (*curSource).loopSpeakerPos[1usize] = sorigin[1usize];
        (*curSource).loopSpeakerPos[2usize] = sorigin[2usize];
        if !velocity.is_null() {
            svelocity[0usize] = *velocity.offset(0isize);
            svelocity[1usize] = *velocity.offset(1isize);
            svelocity[2usize] = *velocity.offset(2isize);
            _S_AL_SanitiseVector(svelocity.as_mut_ptr(), 1393i32);
        } else {
            svelocity[2usize] = 0i32 as vec_t;
            svelocity[1usize] = svelocity[2usize];
            svelocity[0usize] = svelocity[1usize]
        }
        qalSourcefv.expect("non-null function pointer")((*curSource).alSource,
                                                        0x1004i32,
                                                        sorigin.as_mut_ptr());
        qalSourcefv.expect("non-null function pointer")((*curSource).alSource,
                                                        0x1006i32,
                                                        svelocity.as_mut_ptr());
    };
}
/*
=================
S_AL_HearingThroughEntity

Also see S_Base_HearingThroughEntity
=================
*/
unsafe extern "C" fn S_AL_HearingThroughEntity(mut entityNum: libc::c_int)
 -> qboolean {
    let mut distanceSq: libc::c_float = 0.;
    if lastListenerNumber == entityNum {
        distanceSq =
            DistanceSquared(entityList[entityNum as usize].origin.as_mut_ptr()
                                as *const vec_t,
                            lastListenerOrigin.as_mut_ptr() as *const vec_t);
        if distanceSq > 48.0f32 * 48.0f32 {
            return qfalse
        } else { return qtrue }
    } else { return qfalse };
}
/*
=================
S_AL_SrcAlloc
=================
*/
unsafe extern "C" fn S_AL_SrcAlloc(mut priority: alSrcPriority_t,
                                   mut entnum: libc::c_int,
                                   mut channel: libc::c_int) -> srcHandle_t {
    let mut i: libc::c_int = 0;
    let mut empty: libc::c_int = -1i32;
    let mut weakest: libc::c_int = -1i32;
    let mut weakest_time: libc::c_int = Sys_Milliseconds();
    let mut weakest_pri: libc::c_int = 999i32;
    let mut weakest_gain: libc::c_float = 1000.0f64 as libc::c_float;
    let mut weakest_isplaying: qboolean = qtrue;
    let mut weakest_numloops: libc::c_int = 0i32;
    let mut curSource: *mut src_t = 0 as *mut src_t;
    i = 0i32;
    while i < srcCount {
        curSource = &mut srcList[i as usize] as *mut src_t;
        // If it's locked, we aren't even going to look at it
        if !(0 != (*curSource).isLocked as u64) {
            // Is it empty or not?
            if 0 == (*curSource).isActive as u64 {
                empty = i;
                break ;
            } else if 0 != (*curSource).isPlaying as u64 {
                if 0 != weakest_isplaying as libc::c_uint &&
                       ((*curSource).priority as libc::c_uint) <
                           priority as libc::c_uint &&
                       (((*curSource).priority as libc::c_uint) <
                            weakest_pri as libc::c_uint ||
                            0 == (*curSource).isLooping as u64 &&
                                ((*curSource).scaleGain < weakest_gain ||
                                     (*curSource).lastUsedTime <
                                         weakest_time)) {
                    weakest_pri = (*curSource).priority as libc::c_int;
                    weakest_time = (*curSource).lastUsedTime;
                    weakest_gain = (*curSource).scaleGain;
                    weakest = i
                }
            } else {
                weakest_isplaying = qfalse;
                if weakest < 0i32 ||
                       knownSfx[(*curSource).sfx as usize].loopCnt >
                           weakest_numloops ||
                       ((*curSource).priority as libc::c_uint) <
                           weakest_pri as libc::c_uint ||
                       (*curSource).lastUsedTime < weakest_time {
                    weakest_pri = (*curSource).priority as libc::c_int;
                    weakest_time = (*curSource).lastUsedTime;
                    weakest_numloops =
                        knownSfx[(*curSource).sfx as usize].loopCnt;
                    weakest = i
                }
            }
        }
        i += 1
    }
    if empty == -1i32 { empty = weakest }
    if empty >= 0i32 {
        S_AL_SrcKill(empty);
        srcList[empty as usize].isActive = qtrue;
        srcActiveCnt += 1
    }
    return empty;
}
/*
=================
S_AL_CheckInput
Check whether input values from mods are out of range.
Necessary for i.g. Western Quake3 mod which is buggy.
=================
*/
unsafe extern "C" fn S_AL_CheckInput(mut entityNum: libc::c_int,
                                     mut sfx: sfxHandle_t) -> qboolean {
    if entityNum < 0i32 || entityNum >= 1i32 << 10i32 {
        Com_Error(ERR_DROP as libc::c_int,
                  b"ERROR: S_AL_CheckInput: bad entitynum %i\x00" as *const u8
                      as *const libc::c_char, entityNum);
    }
    if sfx < 0i32 || sfx >= numSfx {
        Com_Printf(b"^1ERROR: S_AL_CheckInput: handle %i out of range\n\x00"
                       as *const u8 as *const libc::c_char, sfx);
        return qtrue
    }
    return qfalse;
}
/*
=================
S_AL_AddLoopingSound
=================
*/
unsafe extern "C" fn S_AL_AddLoopingSound(mut entityNum: libc::c_int,
                                          mut origin: *const vec_t,
                                          mut velocity: *const vec_t,
                                          mut sfx: sfxHandle_t) {
    S_AL_SrcLoop(SRCPRI_ENTITY, sfx, origin, velocity, entityNum);
}
/*
=================
S_AL_ClearLoopingSounds
=================
*/
unsafe extern "C" fn S_AL_ClearLoopingSounds(mut killall: qboolean) {
    let mut i: libc::c_int = 0;
    i = 0i32;
    while i < srcCount {
        if 0 != srcList[i as usize].isLooping as libc::c_uint &&
               srcList[i as usize].entity != -1i32 {
            entityList[srcList[i as usize].entity as usize].loopAddedThisFrame
                = qfalse
        }
        i += 1
    };
}
/*
=================
S_AL_RawSamples
=================
*/
unsafe extern "C" fn S_AL_RawSamples(mut stream: libc::c_int,
                                     mut samples: libc::c_int,
                                     mut rate: libc::c_int,
                                     mut width: libc::c_int,
                                     mut channels: libc::c_int,
                                     mut data: *const byte,
                                     mut volume: libc::c_float,
                                     mut entityNum: libc::c_int) {
    let mut numBuffers: libc::c_int = 0;
    let mut buffer: ALuint = 0;
    let mut format: ALuint = 0;
    if stream < 0i32 || stream >= 64i32 * 2i32 + 1i32 { return }
    format = S_AL_Format(width, channels);
    if streamSourceHandles[stream as usize] == -1i32 {
        S_AL_AllocateStreamChannel(stream, entityNum);
        if streamSourceHandles[stream as usize] == -1i32 {
            Com_Printf(b"^1ERROR: Can\'t allocate streaming streamSource\n\x00"
                           as *const u8 as *const libc::c_char);
            return
        }
    }
    qalGetSourcei.expect("non-null function pointer")(streamSources[stream as
                                                                        usize],
                                                      0x1015i32,
                                                      &mut numBuffers);
    if numBuffers == 20i32 {
        Com_DPrintf(b"^1WARNING: Steam dropping raw samples, reached MAX_STREAM_BUFFERS\n\x00"
                        as *const u8 as *const libc::c_char);
        return
    }
    if numBuffers == streamNumBuffers[stream as usize] {
        let mut oldBuffers: [ALuint; 20] = [0; 20];
        let mut i: libc::c_int = 0;
        if 0 ==
               S_AL_GenBuffers(1i32, &mut buffer,
                               b"stream\x00" as *const u8 as
                                   *const libc::c_char) as u64 {
            return
        }
        memcpy(oldBuffers.as_mut_ptr() as *mut libc::c_void,
               &mut streamBuffers[stream as usize] as *mut [ALuint; 20] as
                   *const libc::c_void,
               ::std::mem::size_of::<[ALuint; 20]>() as libc::c_ulong);
        i = 0i32;
        while i < streamNumBuffers[stream as usize] {
            streamBuffers[stream as usize][i as usize] =
                oldBuffers[((streamBufIndex[stream as usize] + i) %
                                streamNumBuffers[stream as usize]) as usize];
            i += 1
        }
        streamBuffers[stream as
                          usize][streamNumBuffers[stream as usize] as usize] =
            buffer;
        streamBufIndex[stream as usize] = streamNumBuffers[stream as usize];
        streamNumBuffers[stream as usize] += 1
    }
    buffer =
        streamBuffers[stream as
                          usize][streamBufIndex[stream as usize] as usize];
    streamBufIndex[stream as usize] =
        (streamBufIndex[stream as usize] + 1i32) %
            streamNumBuffers[stream as usize];
    qalBufferData.expect("non-null function pointer")(buffer,
                                                      format as ALenum,
                                                      data as
                                                          *mut libc::c_void,
                                                      samples * width *
                                                          channels, rate);
    qalSourceQueueBuffers.expect("non-null function pointer")(streamSources[stream
                                                                                as
                                                                                usize],
                                                              1i32,
                                                              &mut buffer);
    if entityNum < 0i32 {
        S_AL_Gain(streamSources[stream as usize],
                  volume * (*s_volume).value * (*s_alGain).value);
    }
    if 0 == streamPlaying[stream as usize] as u64 {
        qalSourcePlay.expect("non-null function pointer")(streamSources[stream
                                                                            as
                                                                            usize]);
        streamPlaying[stream as usize] = qtrue
    };
}
static mut streamBufIndex: [libc::c_int; 129] = [0; 129];
/*
=================
S_AL_AllocateStreamChannel
=================
*/
unsafe extern "C" fn S_AL_AllocateStreamChannel(mut stream: libc::c_int,
                                                mut entityNum: libc::c_int) {
    let mut cursrc: srcHandle_t = 0;
    let mut alsrc: ALuint = 0;
    if stream < 0i32 || stream >= 64i32 * 2i32 + 1i32 { return }
    if entityNum >= 0i32 {
        cursrc = S_AL_SrcAlloc(SRCPRI_ENTITY, entityNum, 0i32);
        if cursrc < 0i32 { return }
        S_AL_SrcSetup(cursrc, -1i32, SRCPRI_ENTITY, entityNum, 0i32, qfalse);
        alsrc = S_AL_SrcGet(cursrc);
        srcList[cursrc as usize].isTracking = qtrue;
        srcList[cursrc as usize].isStream = qtrue
    } else {
        cursrc = S_AL_SrcAlloc(SRCPRI_STREAM, -2i32, 0i32);
        if cursrc < 0i32 { return }
        alsrc = S_AL_SrcGet(cursrc);
        S_AL_SrcLock(cursrc);
        srcList[cursrc as usize].scaleGain = 0.0f32;
        qalSourcei.expect("non-null function pointer")(alsrc, 0x1009i32,
                                                       0i32);
        qalSourcei.expect("non-null function pointer")(alsrc, 0x1007i32,
                                                       0i32);
        qalSource3f.expect("non-null function pointer")(alsrc, 0x1004i32,
                                                        0.0f64 as ALfloat,
                                                        0.0f64 as ALfloat,
                                                        0.0f64 as ALfloat);
        qalSource3f.expect("non-null function pointer")(alsrc, 0x1006i32,
                                                        0.0f64 as ALfloat,
                                                        0.0f64 as ALfloat,
                                                        0.0f64 as ALfloat);
        qalSource3f.expect("non-null function pointer")(alsrc, 0x1005i32,
                                                        0.0f64 as ALfloat,
                                                        0.0f64 as ALfloat,
                                                        0.0f64 as ALfloat);
        qalSourcef.expect("non-null function pointer")(alsrc, 0x1021i32,
                                                       0.0f64 as ALfloat);
        qalSourcei.expect("non-null function pointer")(alsrc, 0x202i32, 1i32);
    }
    streamSourceHandles[stream as usize] = cursrc;
    streamSources[stream as usize] = alsrc;
    streamNumBuffers[stream as usize] = 0i32;
    streamBufIndex[stream as usize] = 0i32;
}
/*
=================
S_AL_SrcFind

Finds an active source with matching entity and channel numbers
Returns -1 if there isn't one
=================
*/
/*
=================
S_AL_SrcLock

Locked sources will not be automatically reallocated or managed
=================
*/
unsafe extern "C" fn S_AL_SrcLock(mut src: srcHandle_t) {
    srcList[src as usize].isLocked = qtrue;
}
/*
=================
S_AL_SrcGet
=================
*/
unsafe extern "C" fn S_AL_SrcGet(mut src: srcHandle_t) -> ALuint {
    return srcList[src as usize].alSource;
}
/*
=================
S_AL_StartBackgroundTrack
=================
*/
unsafe extern "C" fn S_AL_StartBackgroundTrack(mut intro: *const libc::c_char,
                                               mut loop_0:
                                                   *const libc::c_char) {
    let mut i: libc::c_int = 0;
    let mut issame: qboolean = qfalse;
    S_AL_StopBackgroundTrack();
    if (intro.is_null() || 0 == *intro) && (loop_0.is_null() || 0 == *loop_0)
       {
        return
    }
    S_AL_MusicSourceGet();
    if musicSourceHandle == -1i32 { return }
    if loop_0.is_null() || 0 == *loop_0 {
        loop_0 = intro;
        issame = qtrue
    } else if !intro.is_null() && 0 != *intro as libc::c_int &&
                  0 == strcmp(intro, loop_0) {
        issame = qtrue
    } else { issame = qfalse }
    Q_strncpyz(s_backgroundLoop.as_mut_ptr(), loop_0,
               ::std::mem::size_of::<[libc::c_char; 64]>() as libc::c_ulong as
                   libc::c_int);
    if 0 == issame as u64 {
        intro_stream = S_CodecOpenStream(intro)
    } else { intro_stream = 0 as *mut snd_stream_t }
    mus_stream = S_CodecOpenStream(s_backgroundLoop.as_mut_ptr());
    if mus_stream.is_null() {
        S_AL_CloseMusicFiles();
        S_AL_MusicSourceFree();
        return
    }
    if 0 ==
           S_AL_GenBuffers(4i32, musicBuffers.as_mut_ptr(),
                           b"music\x00" as *const u8 as *const libc::c_char)
               as u64 {
        return
    }
    i = 0i32;
    while i < 4i32 { S_AL_MusicProcess(musicBuffers[i as usize]); i += 1 }
    qalSourceQueueBuffers.expect("non-null function pointer")(musicSource,
                                                              4i32,
                                                              musicBuffers.as_mut_ptr());
    S_AL_Gain(musicSource, (*s_alGain).value * (*s_musicVolume).value);
    qalSourcePlay.expect("non-null function pointer")(musicSource);
    musicPlaying = qtrue;
}
/*
=================
S_AL_MusicSourceGet
=================
*/
unsafe extern "C" fn S_AL_MusicSourceGet() {
    musicSourceHandle = S_AL_SrcAlloc(SRCPRI_STREAM, -2i32, 0i32);
    if musicSourceHandle == -1i32 { return }
    S_AL_SrcLock(musicSourceHandle);
    musicSource = S_AL_SrcGet(musicSourceHandle);
    srcList[musicSourceHandle as usize].scaleGain = 0.0f32;
    qalSource3f.expect("non-null function pointer")(musicSource, 0x1004i32,
                                                    0.0f64 as ALfloat,
                                                    0.0f64 as ALfloat,
                                                    0.0f64 as ALfloat);
    qalSource3f.expect("non-null function pointer")(musicSource, 0x1006i32,
                                                    0.0f64 as ALfloat,
                                                    0.0f64 as ALfloat,
                                                    0.0f64 as ALfloat);
    qalSource3f.expect("non-null function pointer")(musicSource, 0x1005i32,
                                                    0.0f64 as ALfloat,
                                                    0.0f64 as ALfloat,
                                                    0.0f64 as ALfloat);
    qalSourcef.expect("non-null function pointer")(musicSource, 0x1021i32,
                                                   0.0f64 as ALfloat);
    qalSourcei.expect("non-null function pointer")(musicSource, 0x202i32,
                                                   1i32);
}
/*
=================
S_AL_StartLocalSound

Play a local (non-spatialized) sound effect
=================
*/
unsafe extern "C" fn S_AL_StartLocalSound(mut sfx: sfxHandle_t,
                                          mut channel: libc::c_int) {
    let mut src: srcHandle_t = 0;
    if 0 != S_AL_CheckInput(0i32, sfx) as u64 { return }
    src = S_AL_SrcAlloc(SRCPRI_LOCAL, -1i32, channel);
    if src == -1i32 { return }
    S_AL_SrcSetup(src, sfx, SRCPRI_LOCAL, -1i32, channel, qtrue);
    srcList[src as usize].isPlaying = qtrue;
    qalSourcePlay.expect("non-null function pointer")(srcList[src as
                                                                  usize].alSource);
}
/*
=================
S_AL_StartSound

Play a one-shot sound effect
=================
*/
unsafe extern "C" fn S_AL_StartSound(mut origin: *mut vec_t,
                                     mut entnum: libc::c_int,
                                     mut entchannel: libc::c_int,
                                     mut sfx: sfxHandle_t) {
    let mut sorigin: vec3_t = [0.; 3];
    let mut src: srcHandle_t = 0;
    let mut curSource: *mut src_t = 0 as *mut src_t;
    if !origin.is_null() {
        if 0 != S_AL_CheckInput(0i32, sfx) as u64 { return }
        sorigin[0usize] = *origin.offset(0isize);
        sorigin[1usize] = *origin.offset(1isize);
        sorigin[2usize] = *origin.offset(2isize)
    } else {
        if 0 != S_AL_CheckInput(entnum, sfx) as u64 { return }
        if 0 != S_AL_HearingThroughEntity(entnum) as u64 {
            S_AL_StartLocalSound(sfx, entchannel);
            return
        }
        sorigin[0usize] = entityList[entnum as usize].origin[0usize];
        sorigin[1usize] = entityList[entnum as usize].origin[1usize];
        sorigin[2usize] = entityList[entnum as usize].origin[2usize]
    }
    _S_AL_SanitiseVector(sorigin.as_mut_ptr(), 1265i32);
    if srcActiveCnt > 5i32 * srcCount / 3i32 &&
           DistanceSquared(sorigin.as_mut_ptr() as *const vec_t,
                           lastListenerOrigin.as_mut_ptr() as *const vec_t) >=
               ((*s_alMaxDistance).value + (*s_alGraceDistance).value) *
                   ((*s_alMaxDistance).value + (*s_alGraceDistance).value) {
        return
    }
    src = S_AL_SrcAlloc(SRCPRI_ONESHOT, entnum, entchannel);
    if src == -1i32 { return }
    S_AL_SrcSetup(src, sfx, SRCPRI_ONESHOT, entnum, entchannel, qfalse);
    curSource = &mut srcList[src as usize] as *mut src_t;
    if origin.is_null() { (*curSource).isTracking = qtrue }
    qalSourcefv.expect("non-null function pointer")((*curSource).alSource,
                                                    0x1004i32,
                                                    sorigin.as_mut_ptr());
    S_AL_ScaleGain(curSource, sorigin.as_mut_ptr());
    (*curSource).isPlaying = qtrue;
    qalSourcePlay.expect("non-null function pointer")((*curSource).alSource);
}
/*
=================
S_AL_Shutdown
=================
*/
unsafe extern "C" fn S_AL_Shutdown() {
    // Shut down everything
    let mut i: libc::c_int = 0;
    i = 0i32;
    while i < 64i32 * 2i32 + 1i32 { S_AL_StreamDie(i); i += 1 }
    S_AL_StopBackgroundTrack();
    S_AL_SrcShutdown();
    S_AL_BufferShutdown();
    qalcDestroyContext.expect("non-null function pointer")(alContext);
    qalcCloseDevice.expect("non-null function pointer")(alDevice);
    if !alCaptureDevice.is_null() {
        qalcCaptureStop.expect("non-null function pointer")(alCaptureDevice);
        qalcCaptureCloseDevice.expect("non-null function pointer")(alCaptureDevice);
        alCaptureDevice = 0 as *mut ALCdevice;
        Com_Printf(b"OpenAL capture device closed.\n\x00" as *const u8 as
                       *const libc::c_char);
    }
    i = 0i32;
    while i < 64i32 * 2i32 + 1i32 {
        streamSourceHandles[i as usize] = -1i32;
        streamPlaying[i as usize] = qfalse;
        streamSources[i as usize] = 0i32 as ALuint;
        i += 1
    }
    QAL_Shutdown();
}
static mut alContext: *mut ALCcontext =
    0 as *const ALCcontext as *mut ALCcontext;
/*
=================
S_AL_BufferShutdown
=================
*/
unsafe extern "C" fn S_AL_BufferShutdown() {
    let mut i: libc::c_int = 0;
    if 0 == alBuffersInitialised as u64 { return }
    knownSfx[default_sfx as usize].isLocked = qfalse;
    i = 0i32;
    while i < numSfx { S_AL_BufferUnload(i); i += 1 }
    numSfx = 0i32;
    alBuffersInitialised = qfalse;
}
/*
=================
S_AL_SrcShutdown
=================
*/
unsafe extern "C" fn S_AL_SrcShutdown() {
    let mut i: libc::c_int = 0;
    let mut curSource: *mut src_t = 0 as *mut src_t;
    if 0 == alSourcesInitialised as u64 { return }
    i = 0i32;
    while i < srcCount {
        curSource = &mut srcList[i as usize] as *mut src_t;
        if 0 != (*curSource).isLocked as u64 {
            Com_DPrintf(b"^3WARNING: Source %d is locked\n\x00" as *const u8
                            as *const libc::c_char, i);
        }
        if (*curSource).entity > 0i32 {
            entityList[(*curSource).entity as usize].srcAllocated = qfalse
        }
        qalSourceStop.expect("non-null function pointer")(srcList[i as
                                                                      usize].alSource);
        qalDeleteSources.expect("non-null function pointer")(1i32,
                                                             &mut srcList[i as
                                                                              usize].alSource);
        i += 1
    }
    memset(srcList.as_mut_ptr() as *mut libc::c_void, 0i32,
           ::std::mem::size_of::<[src_t; 128]>() as libc::c_ulong);
    alSourcesInitialised = qfalse;
}
static mut alSourcesInitialised: qboolean = qfalse;
static mut s_alCapture: *mut cvar_t = 0 as *const cvar_t as *mut cvar_t;
/*
=================
S_AL_SrcInit
=================
*/
unsafe extern "C" fn S_AL_SrcInit() -> qboolean {
    let mut i: libc::c_int = 0;
    let mut limit: libc::c_int = 0;
    memset(srcList.as_mut_ptr() as *mut libc::c_void, 0i32,
           ::std::mem::size_of::<[src_t; 128]>() as libc::c_ulong);
    srcCount = 0i32;
    srcActiveCnt = 0i32;
    limit = (*s_alSources).integer;
    if limit > 128i32 {
        limit = 128i32
    } else if limit < 16i32 { limit = 16i32 }
    S_AL_ClearError(qfalse);
    i = 0i32;
    while i < limit {
        qalGenSources.expect("non-null function pointer")(1i32,
                                                          &mut srcList[i as
                                                                           usize].alSource);
        if qalGetError.expect("non-null function pointer")() != 0i32 {
            break ;
        }
        srcCount += 1;
        i += 1
    }
    Com_Printf(b"Allocated %d sources.\n\x00" as *const u8 as
                   *const libc::c_char, srcCount);
    alSourcesInitialised = qtrue;
    return qtrue;
}
#[no_mangle]
pub static mut s_alSources: *mut cvar_t = 0 as *const cvar_t as *mut cvar_t;
#[no_mangle]
pub static mut s_alInputDevice: *mut cvar_t =
    0 as *const cvar_t as *mut cvar_t;
#[no_mangle]
pub static mut s_alDevice: *mut cvar_t = 0 as *const cvar_t as *mut cvar_t;
#[no_mangle]
pub static mut s_alDriver: *mut cvar_t = 0 as *const cvar_t as *mut cvar_t;